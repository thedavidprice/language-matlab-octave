# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "ned2aer [map]":
        prefix: "ned2aer"
        body: '''[${5:az}, ${6:elev}, ${7:slantRange}] = ned2aer(${1:xNorth}, ${2:yEast}, ${3:zDown}, ${4:angleUnit})'''
        description: '''[map] Transform local north-east-down coordinates to local spherical
        [az, elev, slantRange] = ned2aer(xNorth, yEast, zDown, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/ned2aer.html'


    "n2ecc [map]":
        prefix: "n2ecc"
        body: '''${2:ecc} = n2ecc(${1:n})'''
        description: '''[map] Eccentricity of ellipse from third flattening
        ecc = n2ecc(n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/n2ecc.html'


    "map.geodesy.ConformalLatitudeConverter.inverse [map]":
        prefix: "map.geodesy.ConformalLatitudeConverter.inverse"
        body: '''${4:phi} = map.geodesy.ConformalLatitudeConverter.inverse(${1:converter}, ${2:chi}, ${3:angleUnit})'''
        description: '''[map] 
        phi = map.geodesy.ConformalLatitudeConverter.inverse(converter, chi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.ConformalLatitudeConverter.inverse.html'


    "map.geodesy.RectifyingLatitudeConverter.forward [map]":
        prefix: "map.geodesy.RectifyingLatitudeConverter.forward"
        body: '''${4:mu} = map.geodesy.RectifyingLatitudeConverter.forward(${1:converter}, ${2:phi}, ${3:angleUnit})'''
        description: '''[map] 
        mu = map.geodesy.RectifyingLatitudeConverter.forward(converter, phi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.RectifyingLatitudeConverter.forward.html'


    "map.geodesy.RectifyingLatitudeConverter [map]":
        prefix: "map.geodesy.RectifyingLatitudeConverter"
        body: '''${2:converter} = map.geodesy.RectifyingLatitudeConverter(${1:spheroid})'''
        description: '''[map] 
        converter = map.geodesy.RectifyingLatitudeConverter(spheroid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.RectifyingLatitudeConverter.html'


    "lookAtSpheroid [map]":
        prefix: "lookAtSpheroid"
        body: '''[${7:lat}, ${8:lon}, ${9:slantrange}] = lookAtSpheroid(${1:lat0}, ${2:lon0}, ${3:h0}, ${4:az}, ${5:tilt}, ${6:spheroid})'''
        description: '''[map] Line of sight intersection with oblate spheroid
        [lat, lon, slantrange] = lookAtSpheroid(lat0, lon0, h0, az, tilt, spheroid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/lookatspheroid.html'


    "rcurve [map]":
        prefix: "rcurve"
        body: '''${5:r} = rcurve(${1:optional_radius}, ${2:ellipsoid}, ${3:lat}, ${4:optional_angleunits})'''
        description: '''[map] Ellipsoidal radii of curvature
        r = rcurve(optional_radius, ellipsoid, lat, optional_angleunits)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/rcurve.html'


    "map.geodesy.IsometricLatitudeConverter.forward [map]":
        prefix: "map.geodesy.IsometricLatitudeConverter.forward"
        body: '''${4:psi} = map.geodesy.IsometricLatitudeConverter.forward(${1:converter}, ${2:phi}, ${3:angleUnit})'''
        description: '''[map] 
        psi = map.geodesy.IsometricLatitudeConverter.forward(converter, phi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.IsometricLatitudeConverter.forward.html'


    "egm96geoid [map]":
        prefix: "egm96geoid"
        body: '''[${4:N}, ${5:refvec}] = egm96geoid(${1:samplefactor}, ${2:latlim}, ${3:lonlim})'''
        description: '''[map] Geoid height from Earth Gravitational Model 1996 (EGM96)
        [N, refvec] = egm96geoid(samplefactor, latlim, lonlim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/egm96geoid.html'


    "geodeticLatitudeFromGeocentric [map]":
        prefix: "geodeticLatitudeFromGeocentric"
        body: '''${4:phi} = geodeticLatitudeFromGeocentric(${1:psi}, ${2:F}, ${3:angleUnit})'''
        description: '''[map] Convert geocentric to geodetic latitude
        phi = geodeticLatitudeFromGeocentric(psi, F, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/geodeticlatitudefromgeocentric.html'


    "map.geodesy.ConformalLatitudeConverter.forward [map]":
        prefix: "map.geodesy.ConformalLatitudeConverter.forward"
        body: '''${4:chi} = map.geodesy.ConformalLatitudeConverter.forward(${1:converter}, ${2:phi}, ${3:angleUnit})'''
        description: '''[map] 
        chi = map.geodesy.ConformalLatitudeConverter.forward(converter, phi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.ConformalLatitudeConverter.forward.html'


    "aer2enu [map]":
        prefix: "aer2enu"
        body: '''[${5:xEast}, ${6:yNorth}, ${7:zUp}] = aer2enu(${1:az}, ${2:elev}, ${3:slantRange}, ${4:angleUnit})'''
        description: '''[map] Transform local spherical coordinates to local east-north-up
        [xEast, yNorth, zUp] = aer2enu(az, elev, slantRange, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/aer2enu.html'


    "majaxis [map]":
        prefix: "majaxis"
        body: '''${3:a} = majaxis(${1:semiminor}, ${2:e})'''
        description: '''[map] Semimajor axis of ellipse
        a = majaxis(semiminor, e)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/majaxis.html'


    "parametricLatitude [map]":
        prefix: "parametricLatitude"
        body: '''${4:beta} = parametricLatitude(${1:phi}, ${2:F}, ${3:angleUnit})'''
        description: '''[map] Convert geodetic to parametric latitude
        beta = parametricLatitude(phi, F, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/parametriclatitude.html'


    "antipode [map]":
        prefix: "antipode"
        body: '''[${4:newlat}, ${5:newlon}] = antipode(${1:lat}, ${2:lon}, ${3:optional_angleunits})'''
        description: '''[map] Point on opposite side of globe
        [newlat, newlon] = antipode(lat, lon, optional_angleunits)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/antipode.html'


    "map.geodesy.IsometricLatitudeConverter [map]":
        prefix: "map.geodesy.IsometricLatitudeConverter"
        body: '''${2:converter} = map.geodesy.IsometricLatitudeConverter(${1:spheroid})'''
        description: '''[map] 
        converter = map.geodesy.IsometricLatitudeConverter(spheroid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.IsometricLatitudeConverter.html'


    "map.geodesy.IsometricLatitudeConverter.inverse [map]":
        prefix: "map.geodesy.IsometricLatitudeConverter.inverse"
        body: '''${4:phi} = map.geodesy.IsometricLatitudeConverter.inverse(${1:converter}, ${2:psi}, ${3:angleUnit})'''
        description: '''[map] 
        phi = map.geodesy.IsometricLatitudeConverter.inverse(converter, psi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.IsometricLatitudeConverter.inverse.html'


    "map.geodesy.AuthalicLatitudeConverter.forward [map]":
        prefix: "map.geodesy.AuthalicLatitudeConverter.forward"
        body: '''${4:beta} = map.geodesy.AuthalicLatitudeConverter.forward(${1:converter}, ${2:phi}, ${3:angleUnit})'''
        description: '''[map] 
        beta = map.geodesy.AuthalicLatitudeConverter.forward(converter, phi, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.AuthalicLatitudeConverter.forward.html'


    "map.geodesy.RectifyingLatitudeConverter.inverse [map]":
        prefix: "map.geodesy.RectifyingLatitudeConverter.inverse"
        body: '''${4:phi} = map.geodesy.RectifyingLatitudeConverter.inverse(${1:converter}, ${2:mu}, ${3:angleUnit})'''
        description: '''[map] 
        phi = map.geodesy.RectifyingLatitudeConverter.inverse(converter, mu, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.RectifyingLatitudeConverter.inverse.html'


    "referenceEllipsoid [map]":
        prefix: "referenceEllipsoid"
        body: '''${3:E} = referenceEllipsoid(${1:name}, ${2:optional_lengthUnit})'''
        description: '''[map] 
        E = referenceEllipsoid(name, optional_lengthUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/referenceEllipsoid.html'


    "rsphere [map]":
        prefix: "rsphere"
        body: '''${8:r} = rsphere(${1:typeOfRadius}, ${2:lat1}, ${3:lon1}, ${4:lat2}, ${5:lon2}, ${6:ellipsoid}, ${7:optional_angleUnits})'''
        description: '''[map] Radii of auxiliary spheres
        r = rsphere(typeOfRadius, lat1, lon1, lat2, lon2, ellipsoid, optional_angleUnits)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/rsphere.html'


    "wgs84Ellipsoid [map]":
        prefix: "wgs84Ellipsoid"
        body: '''${2:E} = wgs84Ellipsoid(${1:lengthUnit})'''
        description: '''[map] Reference ellipsoid for World Geodetic System 1984
        E = wgs84Ellipsoid(lengthUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/wgs84ellipsoid.html'


    "axes2ecc [map]":
        prefix: "axes2ecc"
        body: '''${3:ecc} = axes2ecc(${1:semimajor}, ${2:semiminor})'''
        description: '''[map] Eccentricity of ellipse from axes lengths
        ecc = axes2ecc(semimajor, semiminor)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/axes2ecc.html'


    "map.geodesy.AuthalicLatitudeConverter.inverse [map]":
        prefix: "map.geodesy.AuthalicLatitudeConverter.inverse"
        body: '''${4:phi} = map.geodesy.AuthalicLatitudeConverter.inverse(${1:converter}, ${2:beta}, ${3:angleUnit})'''
        description: '''[map] 
        phi = map.geodesy.AuthalicLatitudeConverter.inverse(converter, beta, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.AuthalicLatitudeConverter.inverse.html'


    "map.geodesy.AuthalicLatitudeConverter [map]":
        prefix: "map.geodesy.AuthalicLatitudeConverter"
        body: '''${2:converter} = map.geodesy.AuthalicLatitudeConverter(${1:spheroid})'''
        description: '''[map] 
        converter = map.geodesy.AuthalicLatitudeConverter(spheroid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.AuthalicLatitudeConverter.html'


    "map.geodesy.ConformalLatitudeConverter [map]":
        prefix: "map.geodesy.ConformalLatitudeConverter"
        body: '''${2:converter} = map.geodesy.ConformalLatitudeConverter(${1:spheroid})'''
        description: '''[map] 
        converter = map.geodesy.ConformalLatitudeConverter(spheroid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/map.geodesy.ConformalLatitudeConverter.html'


    "meridianfwd [map]":
        prefix: "meridianfwd"
        body: '''${4:phi2} = meridianfwd(${1:phi1}, ${2:s}, ${3:optional_ellipsoid})'''
        description: '''[map] Reckon position along meridian
        phi2 = meridianfwd(phi1, s, optional_ellipsoid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/meridianfwd.html'


    "meridianarc [map]":
        prefix: "meridianarc"
        body: '''${4:s} = meridianarc(${1:phi1}, ${2:phi2}, ${3:optional_ellipsoid})'''
        description: '''[map] Ellipsoidal distance along meridian
        s = meridianarc(phi1, phi2, optional_ellipsoid)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/meridianarc.html'


    "geodeticLatitudeFromParametric [map]":
        prefix: "geodeticLatitudeFromParametric"
        body: '''${4:phi} = geodeticLatitudeFromParametric(${1:beta}, ${2:F}, ${3:angleUnit})'''
        description: '''[map] Convert parametric to geodetic latitude
        phi = geodeticLatitudeFromParametric(beta, F, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/geodeticlatitudefromparametric.html'


    "minaxis [map]":
        prefix: "minaxis"
        body: '''${3:b} = minaxis(${1:semimajor}, ${2:e})'''
        description: '''[map] Semiminor axis of ellipse
        b = minaxis(semimajor, e)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/minaxis.html'


    "ecc2n [map]":
        prefix: "ecc2n"
        body: '''${2:n} = ecc2n(${1:ecc})'''
        description: '''[map] Third flattening of ellipse from eccentricity
        n = ecc2n(ecc)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/ecc2n.html'


    "referenceSphere [map]":
        prefix: "referenceSphere"
        body: '''${3:S} = referenceSphere(${1:name}, ${2:optional_lengthUnit})'''
        description: '''[map] 
        S = referenceSphere(name, optional_lengthUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/referenceSphere.html'


    "ecc2flat [map]":
        prefix: "ecc2flat"
        body: '''${2:f} = ecc2flat(${1:ecc})'''
        description: '''[map] Flattening of ellipse from eccentricity
        f = ecc2flat(ecc)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/ecc2flat.html'


    "departure [map]":
        prefix: "departure"
        body: '''${6:dist} = departure(${1:long1}, ${2:long2}, ${3:lat}, ${4:optional_ellipsoid}, ${5:optional_units})'''
        description: '''[map] Departure of longitudes at specified latitudes
        dist = departure(long1, long2, lat, optional_ellipsoid, optional_units)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/departure.html'


    "geocentricLatitude [map]":
        prefix: "geocentricLatitude"
        body: '''${4:psi} = geocentricLatitude(${1:phi}, ${2:F}, ${3:angleUnit})'''
        description: '''[map] Convert geodetic to geocentric latitude
        psi = geocentricLatitude(phi, F, angleUnit)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/geocentriclatitude.html'


    "flat2ecc [map]":
        prefix: "flat2ecc"
        body: '''${2:ecc} = flat2ecc(${1:f})'''
        description: '''[map] Eccentricity of ellipse from flattening
        ecc = flat2ecc(f)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/map/ref/flat2ecc.html'

