# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "settlingtime [signal]":
        prefix: "settlingtime"
        body: '''[${7:S}, ${8:SLEV}, ${9:SINST}] = settlingtime(${1:X}, ${2:T}, ${3:D}, 'MidPercentReferenceLevel', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[signal] Settling time for bilevel waveform
        [S, SLEV, SINST] = settlingtime(X, T, D, 'MidPercentReferenceLevel', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/settlingtime.html'


    "rssq [signal]":
        prefix: "rssq"
        body: '''${3:Y} = rssq(${1:X}, ${2:optional_DIM})'''
        description: '''[signal]  Root-sum-of-squares level
        Y = rssq(X, optional_DIM)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rssq.html'


    "bilinear [signal]":
        prefix: "bilinear"
        body: '''[${7:Ad}, ${8:Bd}, ${9:Cd}, ${10:Dd}] = bilinear(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:fs}, ${6:optional_fp})'''
        description: '''[signal] Bilinear transformation method for analog-to-digital filter conversion
        [Ad, Bd, Cd, Dd] = bilinear(A, B, C, D, fs, optional_fp)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bilinear.html'


    "residuez [signal]":
        prefix: "residuez"
        body: '''[${4:b}, ${5:a}] = residuez(${1:r}, ${2:p}, ${3:k})'''
        description: '''[signal] Z-transform partial-fraction expansion
        [b, a] = residuez(r, p, k)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/residuez.html'


    "sgolay [signal]":
        prefix: "sgolay"
        body: '''[${4:b}, ${5:g}] = sgolay(${1:order}, ${2:framelen}, ${3:optional_weights})'''
        description: '''[signal] Savitzky-Golay filter design
        [b, g] = sgolay(order, framelen, optional_weights)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sgolay.html'


    "modalfrf [signal]":
        prefix: "modalfrf"
        body: '''[${4:frf}, ${5:f}] = modalfrf(${1:sys}, ${2:f}, 'Sensor', ${3:value})'''
        description: '''[signal] Frequency-response functions for modal analysis
        [frf, f] = modalfrf(sys, f, 'Sensor', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/modalfrf.html'


    "db2mag [signal]":
        prefix: "db2mag"
        body: '''${2:y} = db2mag(${1:ydb})'''
        description: '''[signal] Convert
decibels (dB) to magnitude
        y = db2mag(ydb)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/db2mag.html'


    "meanfreq [signal]":
        prefix: "meanfreq"
        body: '''[${5:freq}, ${6:power}] = meanfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''
        description: '''[signal] Mean frequency
        [freq, power] = meanfreq(sxx, f, rbw, optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/meanfreq.html'


    "rcosdesign [signal]":
        prefix: "rcosdesign"
        body: '''${5:b} = rcosdesign(${1:beta}, ${2:span}, ${3:sps}, ${4:optional_shape})'''
        description: '''[signal] Raised cosine FIR pulse-shaping filter design
        b = rcosdesign(beta, span, sps, optional_shape)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/../signal/ref/rcosdesign.html'


    "bandstop [signal]":
        prefix: "bandstop"
        body: '''[${6:y}, ${7:d}] = bandstop(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[signal] Bandstop-filter
            signals
        [y, d] = bandstop(xt, fpass, 'ImpulseResponse', value, 'Steepness', value, 'StopbandAttenuation', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bandstop.html'


    "cheby2 [signal]":
        prefix: "cheby2"
        body: '''[${6:A}, ${7:B}, ${8:C}, ${9:D}] = cheby2(${1:n}, ${2:Rs}, ${3:Ws}, ${4:ftype}, ${5:optional_'s'})'''
        description: '''[signal] Chebyshev Type II filter using specification object
        [A, B, C, D] = cheby2(n, Rs, Ws, ftype, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheby2.html'


    "yulewalk [signal]":
        prefix: "yulewalk"
        body: '''[${4:b}, ${5:a}] = yulewalk(${1:n}, ${2:f}, ${3:m})'''
        description: '''[signal] Recursive digital filter design
        [b, a] = yulewalk(n, f, m)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/yulewalk.html'


    "gmonopuls [signal]":
        prefix: "gmonopuls"
        body: '''${3:tc} = gmonopuls(${1:'cutoff'}, ${2:fc})'''
        description: '''[signal] Gaussian monopulse
        tc = gmonopuls('cutoff', fc)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/gmonopuls.html'


    "nuttallwin [signal]":
        prefix: "nuttallwin"
        body: '''${3:w} = nuttallwin(${1:N}, ${2:optional_SFLAG})'''
        description: '''[signal] Nuttall-defined minimum 4-term Blackman-Harris window 
        w = nuttallwin(N, optional_SFLAG)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/nuttallwin.html'


    "hamming [signal]":
        prefix: "hamming"
        body: '''${3:w} = hamming(${1:L}, ${2:optional_sflag})'''
        description: '''[signal] Hamming window
        w = hamming(L, optional_sflag)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/hamming.html'


    "cceps [signal]":
        prefix: "cceps"
        body: '''[${3:xhat}, ${4:nd}, ${5:xhat1}] = cceps(${1:x}, ${2:optional_n})'''
        description: '''[signal] Complex cepstral analysis
        [xhat, nd, xhat1] = cceps(x, optional_n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cceps.html'


    "dtw [signal]":
        prefix: "dtw"
        body: '''[${5:dist}, ${6:ix}, ${7:iy}] = dtw(${1:x}, ${2:y}, ${3:optional_maxsamp}, ${4:optional_metric})'''
        description: '''[signal] Distance between signals using dynamic time warping
        [dist, ix, iy] = dtw(x, y, optional_maxsamp, optional_metric)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dtw.html'


    "cpsd [signal]":
        prefix: "cpsd"
        body: '''[${9:pxy}, ${10:f}] = cpsd(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''
        description: '''[signal] Cross power spectral density
        [pxy, f] = cpsd(x, y, window, noverlap, f, fs, optional_'mimo', optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cpsd.html'


    "rainflow [signal]":
        prefix: "rainflow"
        body: '''[${3:c}, ${4:rm}, ${5:rmr}, ${6:rmm}, ${7:idx}] = rainflow(${1:xt}, ${2:optional_'ext'})'''
        description: '''[signal] Rainflow counts for fatigue analysis
        [c, rm, rmr, rmm, idx] = rainflow(xt, optional_'ext')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rainflow.html'


    "rc2lar [signal]":
        prefix: "rc2lar"
        body: '''${2:g} = rc2lar(${1:k})'''
        description: '''[signal] Convert reflection coefficients to log area ratio parameters
        g = rc2lar(k)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rc2lar.html'


    "ifsst [signal]":
        prefix: "ifsst"
        body: '''${6:x} = ifsst(${1:s}, ${2:window}, ${3:iridge}, ${4:'NumFrequencyBins'}, ${5:nbins})'''
        description: '''[signal] Inverse Fourier synchrosqueezed transform
        x = ifsst(s, window, iridge, 'NumFrequencyBins', nbins)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ifsst.html'


    "enbw [signal]":
        prefix: "enbw"
        body: '''${3:bw} = enbw(${1:window}, ${2:optional_fs})'''
        description: '''[signal] Equivalent noise bandwidth
        bw = enbw(window, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/enbw.html'


    "eqtflength [signal]":
        prefix: "eqtflength"
        body: '''[${3:b}, ${4:a}, ${5:n}, ${6:m}] = eqtflength(${1:num}, ${2:den})'''
        description: '''[signal] Equalize lengths of transfer function's numerator and denominator
        [b, a, n, m] = eqtflength(num, den)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/eqtflength.html'


    "statelevels [signal]":
        prefix: "statelevels"
        body: '''[${4:LEVELS}, ${5:HISTOGRAM}, ${6:BINLEVELS}] = statelevels(${1:X}, ${2:NBINS}, ${3:optional_METHOD})'''
        description: '''[signal]  State-level estimation for bilevel waveform with histogram
method
        [LEVELS, HISTOGRAM, BINLEVELS] = statelevels(X, NBINS, optional_METHOD)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/statelevels.html'


    "peak2rms [signal]":
        prefix: "peak2rms"
        body: '''${3:Y} = peak2rms(${1:X}, ${2:optional_DIM})'''
        description: '''[signal] Peak-magnitude-to-RMS ratio
        Y = peak2rms(X, optional_DIM)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/peak2rms.html'


    "filternorm [signal]":
        prefix: "filternorm"
        body: '''${5:L} = filternorm(${1:b}, ${2:a}, ${3:2}, ${4:optional_tol})'''
        description: '''[signal]  2-norm or infinity-norm of digital filter
        L = filternorm(b, a, 2, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/filternorm.html'


    "lar2rc [signal]":
        prefix: "lar2rc"
        body: '''${2:k} = lar2rc(${1:g})'''
        description: '''[signal] Convert log area ratio parameters to reflection coefficients
        k = lar2rc(g)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lar2rc.html'


    "udecode [signal]":
        prefix: "udecode"
        body: '''${5:y} = udecode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SaturateMode'})'''
        description: '''[signal] Decode 2n-level quantized integer
inputs to floating-point outputs
        y = udecode(u, n, v, optional_'SaturateMode')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/udecode.html'


    "convmtx [signal]":
        prefix: "convmtx"
        body: '''${3:A} = convmtx(${1:h}, ${2:n})'''
        description: '''[signal] Convolution matrix of Galois field
               vector
        A = convmtx(h, n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/convmtx.html'


    "orderspectrum [signal]":
        prefix: "orderspectrum"
        body: '''[${3:spec}, ${4:order}] = orderspectrum(${1:map}, ${2:order})'''
        description: '''[signal] Average spectrum versus order for vibration signal
        [spec, order] = orderspectrum(map, order)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/orderspectrum.html'


    "ss2sos [signal]":
        prefix: "ss2sos"
        body: '''[${8:sos}, ${9:g}] = ss2sos(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:iu}, ${6:'order'}, ${7:optional_'scale'})'''
        description: '''[signal] Convert digital filter state-space parameters to second-order
sections form
        [sos, g] = ss2sos(A, B, C, D, iu, 'order', optional_'scale')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ss2sos.html'


    "dct [signal]":
        prefix: "dct"
        body: '''${6:y} = dct(${1:x}, ${2:n}, ${3:dim}, ${4:optional_'Type'}, ${5:optional_dcttype})'''
        description: '''[signal] Discrete cosine transform
        y = dct(x, n, dim, optional_'Type', optional_dcttype)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dct.html'


    "filtord [signal]":
        prefix: "filtord"
        body: '''${2:n} = filtord(${1:d})'''
        description: '''[signal] Filter order
        n = filtord(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/filtord.html'


    "zp2sos [signal]":
        prefix: "zp2sos"
        body: '''[${7:sos}, ${8:g}] = zp2sos(${1:z}, ${2:p}, ${3:k}, ${4:'order'}, ${5:'scale'}, ${6:optional_zeroflag})'''
        description: '''[signal] Convert zero-pole-gain filter parameters to second-order
sections form
        [sos, g] = zp2sos(z, p, k, 'order', 'scale', optional_zeroflag)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/zp2sos.html'


    "poly2rc [signal]":
        prefix: "poly2rc"
        body: '''[${3:k}, ${4:r0}] = poly2rc(${1:a}, ${2:optional_efinal})'''
        description: '''[signal] Convert prediction filter polynomial to reflection coefficients
        [k, r0] = poly2rc(a, optional_efinal)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/poly2rc.html'


    "lowpass [signal]":
        prefix: "lowpass"
        body: '''[${6:y}, ${7:d}] = lowpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[signal] Lowpass-filter signals
        [y, d] = lowpass(xt, fpass, 'ImpulseResponse', value, 'Steepness', value, 'StopbandAttenuation', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lowpass.html'


    "poctave [signal]":
        prefix: "poctave"
        body: '''[${9:p}, ${10:cf}] = poctave(${1:pxx}, ${2:fs}, ${3:f}, ${4:'psd'}, 'BandsPerOctave', ${5:value}, 'FilterOrder', ${6:value}, 'FrequencyLimits', ${7:value}, 'Weighting', ${8:value})'''
        description: '''[signal] Generate octave spectrum
        [p, cf] = poctave(pxx, fs, f, 'psd', 'BandsPerOctave', value, 'FilterOrder', value, 'FrequencyLimits', value, 'Weighting', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/poctave.html'


    "fir2 [signal]":
        prefix: "fir2"
        body: '''${7:b} = fir2(${1:n}, ${2:f}, ${3:m}, ${4:npt}, ${5:lap}, ${6:optional_window})'''
        description: '''[signal] Frequency sampling-based FIR filter design
        b = fir2(n, f, m, npt, lap, optional_window)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fir2.html'


    "parzenwin [signal]":
        prefix: "parzenwin"
        body: '''${2:w} = parzenwin(${1:L})'''
        description: '''[signal] Parzen (de la Vallée Poussin) window
        w = parzenwin(L)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/parzenwin.html'


    "rectpuls [signal]":
        prefix: "rectpuls"
        body: '''${3:y} = rectpuls(${1:t}, ${2:optional_w})'''
        description: '''[signal] Sampled aperiodic rectangle
        y = rectpuls(t, optional_w)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rectpuls.html'


    "rc2is [signal]":
        prefix: "rc2is"
        body: '''${2:isin} = rc2is(${1:k})'''
        description: '''[signal] Convert reflection coefficients to inverse sine parameters
        isin = rc2is(k)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rc2is.html'


    "tachorpm [signal]":
        prefix: "tachorpm"
        body: '''[${8:rpm}, ${9:t}, ${10:tp}] = tachorpm(${1:x}, ${2:fs}, 'PulsesPerRev', ${3:value}, 'StateLevels', ${4:value}, 'OutputFs', ${5:value}, 'FitType', ${6:value}, 'FitPoints', ${7:value})'''
        description: '''[signal] Extract RPM signal from tachometer pulses
        [rpm, t, tp] = tachorpm(x, fs, 'PulsesPerRev', value, 'StateLevels', value, 'OutputFs', value, 'FitType', value, 'FitPoints', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tachorpm.html'


    "single [signal]":
        prefix: "single"
        body: '''${2:f2} = single(${1:f1})'''
        description: '''[signal] Single-precision arrays
        f2 = single(f1)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/single.html'


    "pmtm [signal]":
        prefix: "pmtm"
        body: '''[${9:pxx}, ${10:w}, ${11:pxxc}] = pmtm(${1:x}, ${2:dpss_params}, ${3:optional_method}, ${4:'DropLastTaper'}, ${5:optional_dropflag}, ${6:optional_freqrange}, ${7:'ConfidenceLevel'}, ${8:optional_probability})'''
        description: '''[signal] Multitaper power spectral density estimate
        [pxx, w, pxxc] = pmtm(x, dpss_params, optional_method, 'DropLastTaper', optional_dropflag, optional_freqrange, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pmtm.html'


    "tsa [signal]":
        prefix: "tsa"
        body: '''[${7:ta}, ${8:t}, ${9:p}, ${10:rpm}] = tsa(${1:xt}, ${2:tp}, 'Method', ${3:value}, 'NumRotations', ${4:value}, 'PulsesPerRotation', ${5:value}, 'ResampleFactor', ${6:value})'''
        description: '''[signal] Time-synchronous signal average
        [ta, t, p, rpm] = tsa(xt, tp, 'Method', value, 'NumRotations', value, 'PulsesPerRotation', value, 'ResampleFactor', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tsa.html'


    "risetime [signal]":
        prefix: "risetime"
        body: '''[${6:R}, ${7:LT}, ${8:UT}, ${9:LL}, ${10:UL}] = risetime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[signal]  Rise time of positive-going bilevel waveform transitions
        [R, LT, UT, LL, UL] = risetime(X, optional_T, 'PercentReferenceLevels', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/risetime.html'


    "ac2rc [signal]":
        prefix: "ac2rc"
        body: '''[${2:k}, ${3:r0}] = ac2rc(${1:r})'''
        description: '''[signal] Convert autocorrelation sequence to reflection coefficients
        [k, r0] = ac2rc(r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ac2rc.html'


    "bandpower [signal]":
        prefix: "bandpower"
        body: '''${5:p} = bandpower(${1:pxx}, ${2:f}, ${3:optional_freqrange}, ${4:'psd'})'''
        description: '''[signal] Band power
        p = bandpower(pxx, f, optional_freqrange, 'psd')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bandpower.html'


    "shiftdata [signal]":
        prefix: "shiftdata"
        body: '''[${3:x}, ${4:perm}, ${5:nshifts}] = shiftdata(${1:x}, ${2:dim})'''
        description: '''[signal] Shift data to operate on specified dimension
        [x, perm, nshifts] = shiftdata(x, dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/shiftdata.html'


    "sos2ss [signal]":
        prefix: "sos2ss"
        body: '''[${3:A}, ${4:B}, ${5:C}, ${6:D}] = sos2ss(${1:sos}, ${2:optional_g})'''
        description: '''[signal] Convert digital filter second-order section parameters
to state-space form
        [A, B, C, D] = sos2ss(sos, optional_g)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sos2ss.html'


    "isstable [signal]":
        prefix: "isstable"
        body: '''${2:flag} = isstable(${1:d})'''
        description: '''[signal] Determine whether system is stable
        flag = isstable(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/isstable.html'


    "prony [signal]":
        prefix: "prony"
        body: '''[${4:Num}, ${5:Den}] = prony(${1:impulse_resp}, ${2:num_ord}, ${3:denom_ord})'''
        description: '''[signal]  Prony method for filter design
        [Num, Den] = prony(impulse_resp, num_ord, denom_ord)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/prony.html'


    "strips [signal]":
        prefix: "strips"
        body: '''strips(${1:x}, ${2:sd}, ${3:fs}, ${4:scale})'''
        description: '''[signal] Strip plot
        strips(x, sd, fs, scale)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/strips.html'


    "gaussdesign [signal]":
        prefix: "gaussdesign"
        body: '''${4:h} = gaussdesign(${1:bt}, ${2:span}, ${3:sps})'''
        description: '''[signal] Gaussian FIR pulse-shaping filter design
        h = gaussdesign(bt, span, sps)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/../signal/ref/gaussdesign.html'


    "thd [signal]":
        prefix: "thd"
        body: '''[${7:r}, ${8:harmpow}, ${9:harmfreq}] = thd(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''
        description: '''[signal] Total harmonic distortion
        [r, harmpow, harmfreq] = thd(sxx, f, rbw, optional_n, 'power', optional_'aliased')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/thd.html'


    "phasedelay [signal]":
        prefix: "phasedelay"
        body: '''${4:phi} = phasedelay(${1:d}, ${2:optional_f}, ${3:optional_fs})'''
        description: '''[signal] Phase delay response of discrete-time filter System
        object
        phi = phasedelay(d, optional_f, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/phasedelay.html'


    "poly2lsf [signal]":
        prefix: "poly2lsf"
        body: '''${2:lsf} = poly2lsf(${1:a})'''
        description: '''[signal] Convert prediction filter coefficients to line spectral frequencies
        lsf = poly2lsf(a)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/poly2lsf.html'


    "aryule [signal]":
        prefix: "aryule"
        body: '''[${3:a}, ${4:e}, ${5:rc}] = aryule(${1:x}, ${2:p})'''
        description: '''[signal] Autoregressive all-pole model parameters — Yule-Walker
method
        [a, e, rc] = aryule(x, p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/aryule.html'


    "icceps [signal]":
        prefix: "icceps"
        body: '''${3:x} = icceps(${1:xhat}, ${2:optional_nd})'''
        description: '''[signal] Inverse complex cepstrum
        x = icceps(xhat, optional_nd)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/icceps.html'


    "marcumq [signal]":
        prefix: "marcumq"
        body: '''${4:Q} = marcumq(${1:a}, ${2:b}, ${3:optional_m})'''
        description: '''[signal] Generalized Marcum Q function
        Q = marcumq(a, b, optional_m)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/marcumq.html'


    "polystab [signal]":
        prefix: "polystab"
        body: '''${2:b} = polystab(${1:a})'''
        description: '''[signal] Stabilize polynomial
        b = polystab(a)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/polystab.html'


    "medfreq [signal]":
        prefix: "medfreq"
        body: '''[${5:freq}, ${6:power}] = medfreq(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_freqrange})'''
        description: '''[signal] Median frequency
        [freq, power] = medfreq(sxx, f, rbw, optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/medfreq.html'


    "stepz [signal]":
        prefix: "stepz"
        body: '''[${4:h}, ${5:t}] = stepz(${1:d}, ${2:n}, ${3:optional_fs})'''
        description: '''[signal] Step response of discrete-time filter System
        object
        [h, t] = stepz(d, n, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/stepz.html'


    "pburg [signal]":
        prefix: "pburg"
        body: '''[${8:pxx}, ${9:f}, ${10:pxxc}] = pburg(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[signal] Autoregressive power spectral density estimate —
Burg’s method
        [pxx, f, pxxc] = pburg(x, order, f, fs, optional_freqrange, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pburg.html'


    "fircls1 [signal]":
        prefix: "fircls1"
        body: '''${10:b} = fircls1(${1:n}, ${2:wo}, ${3:dp}, ${4:ds}, ${5:wp}, ${6:ws}, ${7:k}, ${8:optional_'high'}, ${9:optional_'design_flag'})'''
        description: '''[signal] Constrained-least-squares linear-phase FIR lowpass and
highpass filter design
        b = fircls1(n, wo, dp, ds, wp, ws, k, optional_'high', optional_'design_flag')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fircls1.html'


    "mscohere [signal]":
        prefix: "mscohere"
        body: '''[${9:cxy}, ${10:f}] = mscohere(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange})'''
        description: '''[signal] Magnitude-squared coherence
        [cxy, f] = mscohere(x, y, window, noverlap, f, fs, optional_'mimo', optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/mscohere.html'


    "sawtooth [signal]":
        prefix: "sawtooth"
        body: '''${3:x} = sawtooth(${1:t}, ${2:optional_xmax})'''
        description: '''[signal] Sawtooth or triangle wave
        x = sawtooth(t, optional_xmax)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sawtooth.html'


    "hampel [signal]":
        prefix: "hampel"
        body: '''[${4:y}, ${5:j}, ${6:xmedian}, ${7:xsigma}] = hampel(${1:x}, ${2:k}, ${3:optional_nsigma})'''
        description: '''[signal] Outlier removal using Hampel identifier
        [y, j, xmedian, xsigma] = hampel(x, k, optional_nsigma)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/hampel.html'


    "db2pow [signal]":
        prefix: "db2pow"
        body: '''${2:y} = db2pow(${1:ydb})'''
        description: '''[signal] Convert decibels to power
        y = db2pow(ydb)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/db2pow.html'


    "alignsignals [signal]":
        prefix: "alignsignals"
        body: '''[${5:Xa}, ${6:Ya}, ${7:D}] = alignsignals(${1:X}, ${2:Y}, ${3:maxlag}, ${4:optional_'truncate'})'''
        description: '''[signal] Align two signals by delaying earliest signal
        [Xa, Ya, D] = alignsignals(X, Y, maxlag, optional_'truncate')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/../signal/ref/alignsignals.html'


    "fftfilt [signal]":
        prefix: "fftfilt"
        body: '''${4:y} = fftfilt(${1:gpuArrayb}, ${2:gpuArrayX}, ${3:optional_n})'''
        description: '''[signal] FFT-based FIR filtering using overlap-add method
        y = fftfilt(gpuArrayb, gpuArrayX, optional_n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fftfilt.html'


    "findchangepts [signal]":
        prefix: "findchangepts"
        body: '''[${6:ipt}, ${7:residual}] = findchangepts(${1:x}, 'MaxNumChanges', ${2:value}, 'Statistic', ${3:value}, 'MinDistance', ${4:value}, 'MinThreshold', ${5:value})'''
        description: '''[signal] Find abrupt changes in signal
        [ipt, residual] = findchangepts(x, 'MaxNumChanges', value, 'Statistic', value, 'MinDistance', value, 'MinThreshold', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/findchangepts.html'


    "besselap [signal]":
        prefix: "besselap"
        body: '''[${2:z}, ${3:p}, ${4:k}] = besselap(${1:n})'''
        description: '''[signal]  Bessel analog lowpass filter prototype
        [z, p, k] = besselap(n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/besselap.html'


    "overshoot [signal]":
        prefix: "overshoot"
        body: '''[${8:OS}, ${9:OSLEV}, ${10:OSINST}] = overshoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''
        description: '''[signal]  Overshoot metrics of bilevel waveform transitions
        [OS, OSLEV, OSINST] = overshoot(X, optional_T, 'PercentReferenceLevels', value, 'Region', value, 'SeekFactor', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/overshoot.html'


    "square [signal]":
        prefix: "square"
        body: '''${3:x} = square(${1:t}, ${2:optional_duty})'''
        description: '''[signal] Square wave
        x = square(t, optional_duty)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/square.html'


    "pyulear [signal]":
        prefix: "pyulear"
        body: '''[${8:pxx}, ${9:f}, ${10:pxxc}] = pyulear(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[signal] Autoregressive power spectral density estimate —
Yule-Walker method
        [pxx, f, pxxc] = pyulear(x, order, f, fs, optional_freqrange, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pyulear.html'


    "triang [signal]":
        prefix: "triang"
        body: '''${2:w} = triang(${1:L})'''
        description: '''[signal] Triangular window
        w = triang(L)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/triang.html'


    "hann [signal]":
        prefix: "hann"
        body: '''${3:w} = hann(${1:L}, ${2:optional_sflag})'''
        description: '''[signal] Hann (Hanning) window
        w = hann(L, optional_sflag)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/hann.html'


    "kurtogram [signal]":
        prefix: "kurtogram"
        body: '''[${3:kgram}, ${4:f}, ${5:w}, ${6:fc}, ${7:wc}, ${8:bw}] = kurtogram(${1:xt}, ${2:optional_level})'''
        description: '''[signal] Visualize spectral kurtosis
        [kgram, f, w, fc, wc, bw] = kurtogram(xt, optional_level)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/kurtogram.html'


    "falltime [signal]":
        prefix: "falltime"
        body: '''[${6:F}, ${7:LT}, ${8:UT}, ${9:LL}, ${10:UL}] = falltime(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[signal]  Fall time of negative-going bilevel waveform transitions
        [F, LT, UT, LL, UL] = falltime(X, optional_T, 'PercentReferenceLevels', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/falltime.html'


    "findsignal [signal]":
        prefix: "findsignal"
        body: '''[${11:istart}, ${12:istop}, ${13:dist}] = findsignal(${1:data}, ${2:signal}, 'Normalization', ${3:value}, 'NormalizationLength', ${4:value}, 'MaxDistance', ${5:value}, 'MaxNumSegments', ${6:value}, 'TimeAlignment', ${7:value}, 'EDRTolerance', ${8:value}, 'Metric', ${9:value}, 'Annotate', ${10:value})'''
        description: '''[signal] Find signal location using similarity search
        [istart, istop, dist] = findsignal(data, signal, 'Normalization', value, 'NormalizationLength', value, 'MaxDistance', value, 'MaxNumSegments', value, 'TimeAlignment', value, 'EDRTolerance', value, 'Metric', value, 'Annotate', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/findsignal.html'


    "upfirdn [signal]":
        prefix: "upfirdn"
        body: '''${5:yout} = upfirdn(${1:xin}, ${2:h}, ${3:p}, ${4:optional_q})'''
        description: '''[signal] Upsample, apply FIR filter, and downsample
        yout = upfirdn(xin, h, p, optional_q)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/upfirdn.html'


    "fillgaps [signal]":
        prefix: "fillgaps"
        body: '''${4:y} = fillgaps(${1:x}, ${2:maxlen}, ${3:optional_order})'''
        description: '''[signal] Fill gaps using autoregressive modeling
        y = fillgaps(x, maxlen, optional_order)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fillgaps.html'


    "freqz [signal]":
        prefix: "freqz"
        body: '''${4:h} = freqz(${1:d}, ${2:f}, ${3:fs})'''
        description: '''[signal] Frequency response of filter
        h = freqz(d, f, fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dsp.allpassfilter.freqz.html'


    "fsst [signal]":
        prefix: "fsst"
        body: '''[${5:s}, ${6:f}, ${7:t}] = fsst(${1:x}, ${2:ts}, ${3:optional_window}, ${4:optional_freqloc})'''
        description: '''[signal] Fourier synchrosqueezed transform
        [s, f, t] = fsst(x, ts, optional_window, optional_freqloc)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fsst.html'


    "gausswin [signal]":
        prefix: "gausswin"
        body: '''${3:w} = gausswin(${1:N}, ${2:optional_Alpha})'''
        description: '''[signal] Gaussian window
        w = gausswin(N, optional_Alpha)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/gausswin.html'


    "fir1 [signal]":
        prefix: "fir1"
        body: '''${6:b} = fir1(${1:n}, ${2:Wn}, ${3:optional_ftype}, ${4:optional_window}, ${5:optional_scaleopt})'''
        description: '''[signal] Window-based FIR filter design
        b = fir1(n, Wn, optional_ftype, optional_window, optional_scaleopt)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fir1.html'


    "pspectrum [signal]":
        prefix: "pspectrum"
        body: '''[${12:p}, ${13:f}, ${14:pwr}] = pspectrum(${1:x}, ${2:optional_t}, ${3:optional_type}, 'FrequencyLimits', ${4:value}, 'FrequencyResolution', ${5:value}, 'Leakage', ${6:value}, 'MinThreshold', ${7:value}, 'NumPowerBins', ${8:value}, 'OverlapPercent', ${9:value}, 'Reassign', ${10:value}, 'TimeResolution', ${11:value})'''
        description: '''[signal] Analyze signals in the frequency and time-frequency domains
        [p, f, pwr] = pspectrum(x, optional_t, optional_type, 'FrequencyLimits', value, 'FrequencyResolution', value, 'Leakage', value, 'MinThreshold', value, 'NumPowerBins', value, 'OverlapPercent', value, 'Reassign', value, 'TimeResolution', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pspectrum.html'


    "butter [signal]":
        prefix: "butter"
        body: '''[${5:A}, ${6:B}, ${7:C}, ${8:D}] = butter(${1:n}, ${2:Wn}, ${3:ftype}, ${4:optional_'s'})'''
        description: '''[signal] Butterworth IIR digital filter design
        [A, B, C, D] = butter(n, Wn, ftype, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/butter.html'


    "dpssdir [signal]":
        prefix: "dpssdir"
        body: '''${3:index} = dpssdir(${1:nw}, ${2:'nw'})'''
        description: '''[signal] Discrete prolate spheroidal sequences database directory
        index = dpssdir(nw, 'nw')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dpssdir.html'


    "tf2latc [signal]":
        prefix: "tf2latc"
        body: '''${3:k} = tf2latc(${1:b}, ${2:'phase'})'''
        description: '''[signal] Convert transfer function filter parameters to lattice
filter form
        k = tf2latc(b, 'phase')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tf2latc.html'


    "blackmanharris [signal]":
        prefix: "blackmanharris"
        body: '''${3:w} = blackmanharris(${1:N}, ${2:optional_SFLAG})'''
        description: '''[signal] Minimum four-term Blackman-Harris window
        w = blackmanharris(N, optional_SFLAG)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/blackmanharris.html'


    "flattopwin [signal]":
        prefix: "flattopwin"
        body: '''${3:w} = flattopwin(${1:L}, ${2:optional_sflag})'''
        description: '''[signal] Flat top weighted window
        w = flattopwin(L, optional_sflag)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/flattopwin.html'


    "isdouble [signal]":
        prefix: "isdouble"
        body: '''${2:flag} = isdouble(${1:d})'''
        description: '''[signal] Determine if digital filter coefficients are double precision
        flag = isdouble(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/isdouble.html'


    "pulseperiod [signal]":
        prefix: "pulseperiod"
        body: '''[${7:P}, ${8:INITCROSS}, ${9:FINALCROSS}, ${10:NEXTCROSS}, ${11:MIDLEV}] = pulseperiod(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[signal] Period of bilevel pulse
        [P, INITCROSS, FINALCROSS, NEXTCROSS, MIDLEV] = pulseperiod(X, optional_T, 'MidPercentReferenceLevel', value, 'Polarity', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pulseperiod.html'


    "decimate [signal]":
        prefix: "decimate"
        body: '''${5:y} = decimate(${1:x}, ${2:r}, ${3:n}, ${4:optional_'fir'})'''
        description: '''[signal] Decimation — decrease sample rate by integer factor
        y = decimate(x, r, n, optional_'fir')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/decimate.html'


    "chebwin [signal]":
        prefix: "chebwin"
        body: '''${3:w} = chebwin(${1:L}, ${2:optional_r})'''
        description: '''[signal] Chebyshev window
        w = chebwin(L, optional_r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/chebwin.html'


    "ellipord [signal]":
        prefix: "ellipord"
        body: '''[${6:n}, ${7:Wp}] = ellipord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[signal] Minimum order for elliptic filters
        [n, Wp] = ellipord(Wp, Ws, Rp, Rs, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ellipord.html'


    "buffer [signal]":
        prefix: "buffer"
        body: '''[${5:y}, ${6:z}, ${7:opt}] = buffer(${1:x}, ${2:n}, ${3:p}, ${4:optional_opt})'''
        description: '''[signal] Buffer signal vector into matrix of data frames
        [y, z, opt] = buffer(x, n, p, optional_opt)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/buffer.html'


    "tukeywin [signal]":
        prefix: "tukeywin"
        body: '''${3:w} = tukeywin(${1:L}, ${2:optional_r})'''
        description: '''[signal] Tukey (tapered cosine) window
        w = tukeywin(L, optional_r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tukeywin.html'


    "ismaxphase [signal]":
        prefix: "ismaxphase"
        body: '''${3:flag} = ismaxphase(${1:d}, ${2:optional_tol})'''
        description: '''[signal] Determine whether filter is maximum phase
        flag = ismaxphase(d, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ismaxphase.html'


    "rectwin [signal]":
        prefix: "rectwin"
        body: '''${2:w} = rectwin(${1:L})'''
        description: '''[signal] Rectangular window
        w = rectwin(L)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rectwin.html'


    "envelope [signal]":
        prefix: "envelope"
        body: '''[${4:yupper}, ${5:ylower}] = envelope(${1:x}, ${2:np}, ${3:'peak'})'''
        description: '''[signal] Signal envelope
        [yupper, ylower] = envelope(x, np, 'peak')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/envelope.html'


    "impz [signal]":
        prefix: "impz"
        body: '''[${4:h}, ${5:t}] = impz(${1:d}, ${2:n}, ${3:optional_fs})'''
        description: '''[signal] Impulse response of discrete-time filter System
        object
        [h, t] = impz(d, n, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dsp.allpassfilter.impz.html'


    "sos2zp [signal]":
        prefix: "sos2zp"
        body: '''[${3:z}, ${4:p}, ${5:k}] = sos2zp(${1:sos}, ${2:optional_g})'''
        description: '''[signal] Convert digital filter second-order section parameters
to zero-pole-gain form
        [z, p, k] = sos2zp(sos, optional_g)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sos2zp.html'


    "rpmtrack [signal]":
        prefix: "rpmtrack"
        body: '''[${10:rpm}, ${11:tout}] = rpmtrack(${1:xt}, ${2:order}, ${3:p}, 'Method', ${4:value}, 'FrequencyResolution', ${5:value}, 'PowerPenalty', ${6:value}, 'FrequencyPenalty', ${7:value}, 'StartTime', ${8:value}, 'EndTime', ${9:value})'''
        description: '''[signal] Track and extract RPM profile from vibration signal
        [rpm, tout] = rpmtrack(xt, order, p, 'Method', value, 'FrequencyResolution', value, 'PowerPenalty', value, 'FrequencyPenalty', value, 'StartTime', value, 'EndTime', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rpmtrack.html'


    "cheb2ap [signal]":
        prefix: "cheb2ap"
        body: '''[${3:z}, ${4:p}, ${5:k}] = cheb2ap(${1:n}, ${2:Rs})'''
        description: '''[signal] Chebyshev Type II analog lowpass filter prototype
        [z, p, k] = cheb2ap(n, Rs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheb2ap.html'


    "sinc [signal]":
        prefix: "sinc"
        body: '''${2:y} = sinc(${1:x})'''
        description: '''[signal] Sinc function
        y = sinc(x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sinc.html'


    "cheb2ord [signal]":
        prefix: "cheb2ord"
        body: '''[${6:n}, ${7:Ws}] = cheb2ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[signal] Chebyshev Type II filter order
        [n, Ws] = cheb2ord(Wp, Ws, Rp, Rs, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheb2ord.html'


    "filtfilt [signal]":
        prefix: "filtfilt"
        body: '''${3:y} = filtfilt(${1:d}, ${2:x})'''
        description: '''[signal] Zero-phase digital filtering
        y = filtfilt(d, x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/filtfilt.html'


    "rooteig [signal]":
        prefix: "rooteig"
        body: '''[${5:f}, ${6:pow}] = rooteig(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''
        description: '''[signal] Frequency and power content using eigenvector method
        [f, pow] = rooteig(x, p, optional_fs, optional_'corr')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rooteig.html'


    "islinphase [signal]":
        prefix: "islinphase"
        body: '''${3:flag} = islinphase(${1:d}, ${2:optional_tol})'''
        description: '''[signal] Determine whether filter has linear phase
        flag = islinphase(d, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/islinphase.html'


    "peak2peak [signal]":
        prefix: "peak2peak"
        body: '''${3:Y} = peak2peak(${1:X}, ${2:optional_DIM})'''
        description: '''[signal] Maximum-to-minimum difference
        Y = peak2peak(X, optional_DIM)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/peak2peak.html'


    "rceps [signal]":
        prefix: "rceps"
        body: '''[${2:y}, ${3:ym}] = rceps(${1:x})'''
        description: '''[signal] Real cepstrum and minimum phase reconstruction
        [y, ym] = rceps(x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rceps.html'


    "besself [signal]":
        prefix: "besself"
        body: '''[${4:A}, ${5:B}, ${6:C}, ${7:D}] = besself(${1:n}, ${2:Wo}, ${3:optional_ftype})'''
        description: '''[signal] Bessel analog filter design
        [A, B, C, D] = besself(n, Wo, optional_ftype)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/besself.html'


    "rms [signal]":
        prefix: "rms"
        body: '''${3:y} = rms(${1:x}, ${2:optional_dim})'''
        description: '''[signal] Root-mean-square level
        y = rms(x, optional_dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rms.html'


    "powerbw [signal]":
        prefix: "powerbw"
        body: '''[${6:bw}, ${7:flo}, ${8:fhi}, ${9:power}] = powerbw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_r})'''
        description: '''[signal] Power bandwidth
        [bw, flo, fhi, power] = powerbw(sxx, f, rbw, freqrange, optional_r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/powerbw.html'


    "highpass [signal]":
        prefix: "highpass"
        body: '''[${6:y}, ${7:d}] = highpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[signal] Highpass-filter signals
        [y, d] = highpass(xt, fpass, 'ImpulseResponse', value, 'Steepness', value, 'StopbandAttenuation', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/highpass.html'


    "tfestimate [signal]":
        prefix: "tfestimate"
        body: '''[${11:txy}, ${12:f}] = tfestimate(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_'mimo'}, ${8:optional_freqrange}, ${9:'Estimator'}, ${10:est})'''
        description: '''[signal] Transfer function estimate
        [txy, f] = tfestimate(x, y, window, noverlap, f, fs, optional_'mimo', optional_freqrange, 'Estimator', est)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tfestimate.html'


    "dpss [signal]":
        prefix: "dpss"
        body: '''[${6:dps_seq}, ${7:lambda}] = dpss(${1:seq_length}, ${2:time_halfbandwidth}, ${3:'interp_method'}, ${4:optional_Ni}, ${5:optional_'trace'})'''
        description: '''[signal] Discrete prolate spheroidal (Slepian) sequences
        [dps_seq, lambda] = dpss(seq_length, time_halfbandwidth, 'interp_method', optional_Ni, optional_'trace')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dpss.html'


    "filt2block [signal]":
        prefix: "filt2block"
        body: '''filt2block(${1:d}, ${2:optional_'subsystem'}, ${3:'FilterStructure'}, ${4:optional_structure}, 'Destination', ${5:value}, 'BlockName', ${6:value}, 'OverwriteBlock', ${7:value}, 'MapCoefficientsToPorts', ${8:value}, 'CoefficientNames', ${9:value}, 'FrameBasedProcessing', ${10:value}, 'OptimizeZeros', ${11:value}, 'OptimizeOnes', ${12:value}, 'OptimizeNegativeOnes', ${13:value}, 'OptimizeDelayChains', ${14:value})'''
        description: '''[signal] Generate Simulink filter block
        filt2block(d, optional_'subsystem', 'FilterStructure', optional_structure, 'Destination', value, 'BlockName', value, 'OverwriteBlock', value, 'MapCoefficientsToPorts', value, 'CoefficientNames', value, 'FrameBasedProcessing', value, 'OptimizeZeros', value, 'OptimizeOnes', value, 'OptimizeNegativeOnes', value, 'OptimizeDelayChains', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/filt2block.html'


    "freqs [signal]":
        prefix: "freqs"
        body: '''[${4:h}, ${5:w}] = freqs(${1:b}, ${2:a}, ${3:n})'''
        description: '''[signal] Frequency response of analog filters
        [h, w] = freqs(b, a, n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/freqs.html'


    "gauspuls [signal]":
        prefix: "gauspuls"
        body: '''${6:tc} = gauspuls(${1:'cutoff'}, ${2:fc}, ${3:bw}, ${4:bwr}, ${5:optional_tpe})'''
        description: '''[signal] Gaussian-modulated sinusoidal RF pulse
        tc = gauspuls('cutoff', fc, bw, bwr, optional_tpe)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/gauspuls.html'


    "rpmfreqmap [signal]":
        prefix: "rpmfreqmap"
        body: '''[${9:map}, ${10:freq}, ${11:rpm}, ${12:time}, ${13:res}] = rpmfreqmap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''
        description: '''[signal] Frequency-RPM map for order analysis
        [map, freq, rpm, time, res] = rpmfreqmap(x, fs, rpm, res, 'Amplitude', value, 'OverlapPercent', value, 'Scale', value, 'Window', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rpmfreqmap.html'


    "pcov [signal]":
        prefix: "pcov"
        body: '''[${8:pxx}, ${9:f}, ${10:pxxc}] = pcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[signal] Autoregressive power spectral density estimate —
covariance method
        [pxx, f, pxxc] = pcov(x, order, f, fs, optional_freqrange, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pcov.html'


    "cfirpm [signal]":
        prefix: "cfirpm"
        body: '''[${9:b}, ${10:delta}, ${11:opt}] = cfirpm(${1:n}, ${2:f}, ${3:a}, ${4:optional_w}, ${5:optional_'sym'}, ${6:optional_'skip_stage2'}, ${7:optional_'debug'}, ${8:optional_{lgrid}})'''
        description: '''[signal] Complex and nonlinear-phase equiripple FIR filter design
        [b, delta, opt] = cfirpm(n, f, a, optional_w, optional_'sym', optional_'skip_stage2', optional_'debug', optional_{lgrid})
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cfirpm.html'


    "dpsssave [signal]":
        prefix: "dpsssave"
        body: '''${4:status} = dpsssave(${1:time_halfbandwidth}, ${2:dps_seq}, ${3:lambda})'''
        description: '''[signal] Discrete prolate spheroidal or Slepian sequence database
        status = dpsssave(time_halfbandwidth, dps_seq, lambda)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dpsssave.html'


    "rpmordermap [signal]":
        prefix: "rpmordermap"
        body: '''[${9:map}, ${10:order}, ${11:rpm}, ${12:time}, ${13:res}] = rpmordermap(${1:x}, ${2:fs}, ${3:rpm}, ${4:res}, 'Amplitude', ${5:value}, 'OverlapPercent', ${6:value}, 'Scale', ${7:value}, 'Window', ${8:value})'''
        description: '''[signal] Order-RPM map for order analysis
        [map, order, rpm, time, res] = rpmordermap(x, fs, rpm, res, 'Amplitude', value, 'OverlapPercent', value, 'Scale', value, 'Window', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rpmordermap.html'


    "modulate [signal]":
        prefix: "modulate"
        body: '''[${6:y}, ${7:t}] = modulate(${1:x}, ${2:fc}, ${3:fs}, ${4:'method'}, ${5:optional_opt})'''
        description: '''[signal] Modulation for communications simulation
        [y, t] = modulate(x, fc, fs, 'method', optional_opt)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/modulate.html'


    "lpc [signal]":
        prefix: "lpc"
        body: '''[${3:a}, ${4:g}] = lpc(${1:x}, ${2:p})'''
        description: '''[signal] Linear prediction filter coefficients
        [a, g] = lpc(x, p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lpc.html'


    "pmusic [signal]":
        prefix: "pmusic"
        body: '''[${9:S}, ${10:f}, ${11:v}, ${12:e}] = pmusic(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''
        description: '''[signal] Pseudospectrum using MUSIC algorithm
        [S, f, v, e] = pmusic(x, p, nfft, fs, nwin, noverlap, optional_'corr', optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pmusic.html'


    "pwelch [signal]":
        prefix: "pwelch"
        body: '''[${11:pxx}, ${12:f}, ${13:pxxc}] = pwelch(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:optional_freqrange}, ${7:optional_spectrumtype}, ${8:optional_trace}, ${9:'ConfidenceLevel'}, ${10:optional_probability})'''
        description: '''[signal] Welch’s power spectral density estimate
        [pxx, f, pxxc] = pwelch(x, window, noverlap, f, fs, optional_freqrange, optional_spectrumtype, optional_trace, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pwelch.html'


    "impzlength [signal]":
        prefix: "impzlength"
        body: '''${3:len} = impzlength(${1:d}, ${2:optional_tol})'''
        description: '''[signal] Impulse response length
        len = impzlength(d, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/impzlength.html'


    "diric [signal]":
        prefix: "diric"
        body: '''${3:y} = diric(${1:x}, ${2:n})'''
        description: '''[signal] Dirichlet or periodic sinc function
        y = diric(x, n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/diric.html'


    "lp2bp [signal]":
        prefix: "lp2bp"
        body: '''[${7:At}, ${8:Bt}, ${9:Ct}, ${10:Dt}] = lp2bp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''
        description: '''[signal] Transform lowpass analog filters to bandpass
        [At, Bt, Ct, Dt] = lp2bp(A, B, C, D, Wo, Bw)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lp2bp.html'


    "bitrevorder [signal]":
        prefix: "bitrevorder"
        body: '''[${2:y}, ${3:i}] = bitrevorder(${1:x})'''
        description: '''[signal] Permute data into bit-reversed order
        [y, i] = bitrevorder(x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bitrevorder.html'


    "snr [signal]":
        prefix: "snr"
        body: '''[${7:r}, ${8:noisepow}] = snr(${1:sxx}, ${2:f}, ${3:rbw}, ${4:optional_n}, ${5:'power'}, ${6:optional_'aliased'})'''
        description: '''[signal] Signal-to-noise ratio
        [r, noisepow] = snr(sxx, f, rbw, optional_n, 'power', optional_'aliased')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/snr.html'


    "sgolayfilt [signal]":
        prefix: "sgolayfilt"
        body: '''${6:y} = sgolayfilt(${1:x}, ${2:order}, ${3:framelen}, ${4:weights}, ${5:optional_dim})'''
        description: '''[signal] Savitzky-Golay filtering
        y = sgolayfilt(x, order, framelen, weights, optional_dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sgolayfilt.html'


    "dutycycle [signal]":
        prefix: "dutycycle"
        body: '''${3:D} = dutycycle(${1:TAU}, ${2:PRF})'''
        description: '''[signal]  Duty cycle of pulse waveform
        D = dutycycle(TAU, PRF)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dutycycle.html'


    "edr [signal]":
        prefix: "edr"
        body: '''[${6:dist}, ${7:ix}, ${8:iy}] = edr(${1:x}, ${2:y}, ${3:tol}, ${4:optional_maxsamp}, ${5:optional_metric})'''
        description: '''[signal] Edit distance on real signals
        [dist, ix, iy] = edr(x, y, tol, optional_maxsamp, optional_metric)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/edr.html'


    "arcov [signal]":
        prefix: "arcov"
        body: '''[${3:a}, ${4:e}] = arcov(${1:x}, ${2:p})'''
        description: '''[signal] Autoregressive all-pole model parameters — covariance
method
        [a, e] = arcov(x, p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/arcov.html'


    "obw [signal]":
        prefix: "obw"
        body: '''[${6:bw}, ${7:flo}, ${8:fhi}, ${9:power}] = obw(${1:sxx}, ${2:f}, ${3:rbw}, ${4:freqrange}, ${5:optional_p})'''
        description: '''[signal] Occupied bandwidth
        [bw, flo, fhi, power] = obw(sxx, f, rbw, freqrange, optional_p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/obw.html'


    "ac2poly [signal]":
        prefix: "ac2poly"
        body: '''[${2:a}, ${3:efinal}] = ac2poly(${1:r})'''
        description: '''[signal] Convert autocorrelation sequence to prediction polynomial
        [a, efinal] = ac2poly(r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ac2poly.html'


    "firpm [signal]":
        prefix: "firpm"
        body: '''${6:b} = firpm(${1:n}, ${2:f}, ${3:@fresp}, ${4:w}, ${5:optional_'ftype'})'''
        description: '''[signal] Parks-McClellan optimal FIR filter design
        b = firpm(n, f, @fresp, w, optional_'ftype')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/firpm.html'


    "instfreq [signal]":
        prefix: "instfreq"
        body: '''[${6:ifq}, ${7:t}] = instfreq(${1:tfd}, ${2:fd}, ${3:td}, 'FrequencyLimits', ${4:value}, 'Method', ${5:value})'''
        description: '''[signal] Estimate instantaneous frequency
        [ifq, t] = instfreq(tfd, fd, td, 'FrequencyLimits', value, 'Method', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/instfreq.html'


    "cheb1ap [signal]":
        prefix: "cheb1ap"
        body: '''[${3:z}, ${4:p}, ${5:k}] = cheb1ap(${1:n}, ${2:Rp})'''
        description: '''[signal] Chebyshev Type I analog lowpass filter prototype
        [z, p, k] = cheb1ap(n, Rp)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheb1ap.html'


    "cusum [signal]":
        prefix: "cusum"
        body: '''[${7:iupper}, ${8:ilower}, ${9:uppersum}, ${10:lowersum}] = cusum(${1:x}, ${2:climit}, ${3:mshift}, ${4:tmean}, ${5:tdev}, ${6:optional_'all'})'''
        description: '''[signal] Detect small changes in mean using cumulative sum
        [iupper, ilower, uppersum, lowersum] = cusum(x, climit, mshift, tmean, tdev, optional_'all')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cusum.html'


    "lsf2poly [signal]":
        prefix: "lsf2poly"
        body: '''${2:a} = lsf2poly(${1:lsf})'''
        description: '''[signal] Convert line spectral frequencies to prediction filter coefficients
        a = lsf2poly(lsf)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lsf2poly.html'


    "latcfilt [signal]":
        prefix: "latcfilt"
        body: '''[${7:f}, ${8:g}, ${9:zf}] = latcfilt(${1:k}, ${2:1}, ${3:x}, ${4:'ic'}, ${5:zi}, ${6:optional_dim})'''
        description: '''[signal] Lattice and lattice-ladder filter implementation
        [f, g, zf] = latcfilt(k, 1, x, 'ic', zi, optional_dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/latcfilt.html'


    "orderwaveform [signal]":
        prefix: "orderwaveform"
        body: '''${10:xrec} = orderwaveform(${1:x}, ${2:fs}, ${3:rpm}, ${4:orderlist}, ${5:optional_rpmrefidx}, 'FilterOrder', ${6:value}, 'Bandwidth', ${7:value}, 'Decouple', ${8:value}, 'SegmentLength', ${9:value})'''
        description: '''[signal] Extract time-domain order waveforms from vibration signal
        xrec = orderwaveform(x, fs, rpm, orderlist, optional_rpmrefidx, 'FilterOrder', value, 'Bandwidth', value, 'Decouple', value, 'SegmentLength', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/orderwaveform.html'


    "latc2tf [signal]":
        prefix: "latc2tf"
        body: '''[${3:num}, ${4:den}] = latc2tf(${1:k}, ${2:'firoption'})'''
        description: '''[signal] Convert lattice filter parameters to transfer function
form
        [num, den] = latc2tf(k, 'firoption')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/latc2tf.html'


    "upsample [signal]":
        prefix: "upsample"
        body: '''${4:y} = upsample(${1:x}, ${2:n}, ${3:optional_phase})'''
        description: '''[signal] Upsample discrete-time models
        y = upsample(x, n, optional_phase)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/upsample.html'


    "levinson [signal]":
        prefix: "levinson"
        body: '''[${3:a}, ${4:e}, ${5:k}] = levinson(${1:r}, ${2:n})'''
        description: '''[signal] Levinson-Durbin recursion
        [a, e, k] = levinson(r, n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/levinson.html'


    "pulsesep [signal]":
        prefix: "pulsesep"
        body: '''[${7:S}, ${8:INITCROSS}, ${9:FINALCROSS}, ${10:NEXTCROSS}, ${11:MIDLEV}] = pulsesep(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[signal] Separation between bilevel waveform pulses
        [S, INITCROSS, FINALCROSS, NEXTCROSS, MIDLEV] = pulsesep(X, optional_T, 'MidPercentReferenceLevel', value, 'Polarity', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pulsesep.html'


    "buttap [signal]":
        prefix: "buttap"
        body: '''[${2:z}, ${3:p}, ${4:k}] = buttap(${1:n})'''
        description: '''[signal] Butterworth filter prototype
        [z, p, k] = buttap(n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/buttap.html'


    "barthannwin [signal]":
        prefix: "barthannwin"
        body: '''${2:w} = barthannwin(${1:L})'''
        description: '''[signal] Modified Bartlett-Hann window
        w = barthannwin(L)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/barthannwin.html'


    "zplane [signal]":
        prefix: "zplane"
        body: '''[${2:vz}, ${3:vp}, ${4:vk}] = zplane(${1:d})'''
        description: '''[signal] Z-plane zero-pole plot for discrete-time filter System
        object
        [vz, vp, vk] = zplane(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/zplane.html'


    "isallpass [signal]":
        prefix: "isallpass"
        body: '''${3:flag} = isallpass(${1:d}, ${2:optional_tol})'''
        description: '''[signal] Determine whether filter is allpass
        flag = isallpass(d, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/isallpass.html'


    "midcross [signal]":
        prefix: "midcross"
        body: '''[${6:C}, ${7:MIDLEV}] = midcross(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[signal] Mid-reference level crossing for bilevel waveform
        [C, MIDLEV] = midcross(X, optional_T, 'MidPercentReferenceLevel', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/midcross.html'


    "bandpass [signal]":
        prefix: "bandpass"
        body: '''[${6:y}, ${7:d}] = bandpass(${1:xt}, ${2:fpass}, 'ImpulseResponse', ${3:value}, 'Steepness', ${4:value}, 'StopbandAttenuation', ${5:value})'''
        description: '''[signal] Bandpass-filter signals
        [y, d] = bandpass(xt, fpass, 'ImpulseResponse', value, 'Steepness', value, 'StopbandAttenuation', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bandpass.html'


    "downsample [signal]":
        prefix: "downsample"
        body: '''${4:y} = downsample(${1:x}, ${2:n}, ${3:optional_phase})'''
        description: '''[signal] Decrease sample rate by integer factor
        y = downsample(x, n, optional_phase)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/downsample.html'


    "interp [signal]":
        prefix: "interp"
        body: '''[${5:y}, ${6:b}] = interp(${1:x}, ${2:r}, ${3:n}, ${4:optional_alpha})'''
        description: '''[signal] Interpolate FRD model
        [y, b] = interp(x, r, n, optional_alpha)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/interp.html'


    "pkurtosis [signal]":
        prefix: "pkurtosis"
        body: '''[${7:sk}, ${8:f}, ${9:thresh}] = pkurtosis(${1:s}, ${2:sampx}, ${3:f}, ${4:window}, ${5:'ConfidenceLevel'}, ${6:p})'''
        description: '''[signal] Spectral kurtosis from signal or spectrogram
        [sk, f, thresh] = pkurtosis(s, sampx, f, window, 'ConfidenceLevel', p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pkurtosis.html'


    "firpmord [signal]":
        prefix: "firpmord"
        body: '''${6:c} = firpmord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''
        description: '''[signal] Parks-McClellan optimal FIR filter order estimation
        c = firpmord(f, a, dev, fs, 'cell')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/firpmord.html'


    "phasez [signal]":
        prefix: "phasez"
        body: '''${4:phi} = phasez(${1:d}, ${2:optional_f}, ${3:optional_fs})'''
        description: '''[signal] Unwrapped phase response for filter
        phi = phasez(d, optional_f, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dsp.allpassfilter.phasez.html'


    "resample [signal]":
        prefix: "resample"
        body: '''[${7:y}, ${8:ty}, ${9:b}] = resample(${1:x}, ${2:tx}, ${3:fs}, ${4:optional_p}, ${5:q}, ${6:optional_method})'''
        description: '''[signal] Resample time-domain data by decimation or interpolation
(requires Signal
            Processing Toolbox software)
        [y, ty, b] = resample(x, tx, fs, optional_p, q, optional_method)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/resample.html'


    "rc2poly [signal]":
        prefix: "rc2poly"
        body: '''[${3:a}, ${4:efinal}] = rc2poly(${1:k}, ${2:optional_r0})'''
        description: '''[signal] Convert reflection coefficients to prediction filter polynomial
        [a, efinal] = rc2poly(k, optional_r0)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rc2poly.html'


    "sosfilt [signal]":
        prefix: "sosfilt"
        body: '''${4:y} = sosfilt(${1:sos}, ${2:x}, ${3:optional_dim})'''
        description: '''[signal] Second-order (biquadratic) IIR digital filtering
        y = sosfilt(sos, x, optional_dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sosfilt.html'


    "schurrc [signal]":
        prefix: "schurrc"
        body: '''[${2:k}, ${3:e}] = schurrc(${1:r})'''
        description: '''[signal] Compute reflection coefficients from autocorrelation sequence
        [k, e] = schurrc(r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/schurrc.html'


    "unshiftdata [signal]":
        prefix: "unshiftdata"
        body: '''${4:y} = unshiftdata(${1:x}, ${2:perm}, ${3:nshifts})'''
        description: '''[signal] Inverse of shiftdata
        y = unshiftdata(x, perm, nshifts)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/unshiftdata.html'


    "mag2db [signal]":
        prefix: "mag2db"
        body: '''${2:ydb} = mag2db(${1:y})'''
        description: '''[signal] Convert
magnitude to decibels (dB)
        ydb = mag2db(y)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/mag2db.html'


    "modalfit [signal]":
        prefix: "modalfit"
        body: '''[${9:fn}, ${10:dr}, ${11:ms}, ${12:ofrf}] = modalfit(${1:sys}, ${2:f}, ${3:mnum}, 'Feedthrough', ${4:value}, 'FitMethod', ${5:value}, 'FreqRange', ${6:value}, 'PhysFreq', ${7:value}, 'DriveIndex', ${8:value})'''
        description: '''[signal] Modal parameters from frequency-response functions
        [fn, dr, ms, ofrf] = modalfit(sys, f, mnum, 'Feedthrough', value, 'FitMethod', value, 'FreqRange', value, 'PhysFreq', value, 'DriveIndex', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/modalfit.html'


    "rc2ac [signal]":
        prefix: "rc2ac"
        body: '''${3:r} = rc2ac(${1:k}, ${2:r0})'''
        description: '''[signal] Convert reflection coefficients to autocorrelation sequence
        r = rc2ac(k, r0)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rc2ac.html'


    "toi [signal]":
        prefix: "toi"
        body: '''[${5:oip3}, ${6:fundpow}, ${7:fundfreq}, ${8:imodpow}, ${9:imodfreq}] = toi(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''
        description: '''[signal] Third-order intercept point
        [oip3, fundpow, fundfreq, imodpow, imodfreq] = toi(sxx, f, rbw, 'power')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/toi.html'


    "db [signal]":
        prefix: "db"
        body: '''${4:dboutput} = db(${1:x}, ${2:optional_SignalType}, ${3:optional_R})'''
        description: '''[signal] Convert energy or power measurements to decibels
        dboutput = db(x, optional_SignalType, optional_R)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/db.html'


    "idct [signal]":
        prefix: "idct"
        body: '''${6:x} = idct(${1:y}, ${2:optional_n}, ${3:optional_dim}, ${4:'Type'}, ${5:dcttype})'''
        description: '''[signal] Inverse discrete cosine transform
        x = idct(y, optional_n, optional_dim, 'Type', dcttype)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/idct.html'


    "bohmanwin [signal]":
        prefix: "bohmanwin"
        body: '''${2:w} = bohmanwin(${1:L})'''
        description: '''[signal] Bohman window
        w = bohmanwin(L)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/bohmanwin.html'


    "pow2db [signal]":
        prefix: "pow2db"
        body: '''${2:ydb} = pow2db(${1:y})'''
        description: '''[signal] Convert power to decibels
        ydb = pow2db(y)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pow2db.html'


    "kaiser [signal]":
        prefix: "kaiser"
        body: '''${3:w} = kaiser(${1:L}, ${2:optional_beta})'''
        description: '''[signal] Kaiser window
        w = kaiser(L, optional_beta)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/kaiser.html'


    "isminphase [signal]":
        prefix: "isminphase"
        body: '''${3:flag} = isminphase(${1:d}, ${2:optional_tol})'''
        description: '''[signal] Determine whether filter is minimum phase
        flag = isminphase(d, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/isminphase.html'


    "vco [signal]":
        prefix: "vco"
        body: '''${4:c} = vco(${1:x}, ${2:[Fmin Fmax]}, ${3:fs})'''
        description: '''[signal] Voltage controlled oscillator
        c = vco(x, [Fmin Fmax], fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/vco.html'


    "invfreqs [signal]":
        prefix: "invfreqs"
        body: '''[${10:b}, ${11:a}] = invfreqs(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''
        description: '''[signal] Identify continuous-time filter parameters from frequency
response data
        [b, a] = invfreqs(h, w, 'complex', n, m, wt, iter, tol, optional_'trace')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/invfreqs.html'


    "tripuls [signal]":
        prefix: "tripuls"
        body: '''${4:y} = tripuls(${1:T}, ${2:optional_w}, ${3:optional_s})'''
        description: '''[signal] Sampled aperiodic triangle
        y = tripuls(T, optional_w, optional_s)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tripuls.html'


    "ordertrack [signal]":
        prefix: "ordertrack"
        body: '''[${5:mag}, ${6:rpm}, ${7:time}] = ordertrack(${1:map}, ${2:order}, ${3:rpm}, ${4:orderlist})'''
        description: '''[signal] Track and extract order magnitudes from vibration signal
        [mag, rpm, time] = ordertrack(map, order, rpm, orderlist)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ordertrack.html'


    "tf2sos [signal]":
        prefix: "tf2sos"
        body: '''[${5:sos}, ${6:g}] = tf2sos(${1:b}, ${2:a}, ${3:'order'}, ${4:optional_'scale'})'''
        description: '''[signal] Convert digital filter transfer function data to second-order
sections form
        [sos, g] = tf2sos(b, a, 'order', optional_'scale')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tf2sos.html'


    "xspectrogram [signal]":
        prefix: "xspectrogram"
        body: '''[${13:s}, ${14:f}, ${15:t}, ${16:c}] = xspectrogram(${1:x}, ${2:y}, ${3:window}, ${4:noverlap}, ${5:f}, ${6:fs}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''
        description: '''[signal] Cross-spectrogram using short-time Fourier transforms
        [s, f, t, c] = xspectrogram(x, y, window, noverlap, f, fs, optional_freqrange, optional_spectrumtype, 'MinThreshold', thresh, optional_freqloc, 'OutputTimeDimension', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/xspectrogram.html'


    "issingle [signal]":
        prefix: "issingle"
        body: '''${2:flag} = issingle(${1:d})'''
        description: '''[signal] Determine if digital filter coefficients are single precision
        flag = issingle(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/issingle.html'


    "rootmusic [signal]":
        prefix: "rootmusic"
        body: '''[${5:f}, ${6:pow}] = rootmusic(${1:x}, ${2:p}, ${3:optional_fs}, ${4:optional_'corr'})'''
        description: '''[signal] Root MUSIC algorithm
        [f, pow] = rootmusic(x, p, optional_fs, optional_'corr')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rootmusic.html'


    "cell2sos [signal]":
        prefix: "cell2sos"
        body: '''${2:m} = cell2sos(${1:c})'''
        description: '''[signal] Convert second-order sections cell array to matrix
        m = cell2sos(c)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cell2sos.html'


    "armcov [signal]":
        prefix: "armcov"
        body: '''[${3:a}, ${4:e}] = armcov(${1:x}, ${2:p})'''
        description: '''[signal] Autoregressive all-pole model parameters — modified
covariance method
        [a, e] = armcov(x, p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/armcov.html'


    "lp2lp [signal]":
        prefix: "lp2lp"
        body: '''[${6:At}, ${7:Bt}, ${8:Ct}, ${9:Dt}] = lp2lp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''
        description: '''[signal] Change cutoff frequency for lowpass analog filter
        [At, Bt, Ct, Dt] = lp2lp(A, B, C, D, Wo)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lp2lp.html'


    "fwht [signal]":
        prefix: "fwht"
        body: '''${4:y} = fwht(${1:x}, ${2:n}, ${3:optional_ordering})'''
        description: '''[signal] Fast Walsh-Hadamard transform
        y = fwht(x, n, optional_ordering)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fwht.html'


    "tfridge [signal]":
        prefix: "tfridge"
        body: '''[${8:fridge}, ${9:iridge}, ${10:lridge}] = tfridge(${1:tfm}, ${2:f}, ${3:penalty}, ${4:'NumRidges'}, ${5:nr}, ${6:'NumFrequencyBins'}, ${7:nbins})'''
        description: '''[signal] Time-frequency ridges
        [fridge, iridge, lridge] = tfridge(tfm, f, penalty, 'NumRidges', nr, 'NumFrequencyBins', nbins)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tfridge.html'


    "zerophase [signal]":
        prefix: "zerophase"
        body: '''[${4:Hr}, ${5:f}] = zerophase(${1:d}, ${2:f}, ${3:optional_fs})'''
        description: '''[signal] Zero-phase response of discrete-time filter System
        object
        [Hr, f] = zerophase(d, f, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/zerophase.html'


    "taylorwin [signal]":
        prefix: "taylorwin"
        body: '''${4:w} = taylorwin(${1:n}, ${2:nbar}, ${3:optional_sll})'''
        description: '''[signal] Taylor window
        w = taylorwin(n, nbar, optional_sll)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/taylorwin.html'


    "invfreqz [signal]":
        prefix: "invfreqz"
        body: '''[${10:b}, ${11:a}] = invfreqz(${1:h}, ${2:w}, ${3:'complex'}, ${4:n}, ${5:m}, ${6:wt}, ${7:iter}, ${8:tol}, ${9:optional_'trace'})'''
        description: '''[signal] Identify discrete-time filter parameters from frequency
response data
        [b, a] = invfreqz(h, w, 'complex', n, m, wt, iter, tol, optional_'trace')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/invfreqz.html'


    "double [signal]":
        prefix: "double"
        body: '''${2:f2} = double(${1:f1})'''
        description: '''[signal] Cast fixed-point filter to use double-precision arithmetic
        f2 = double(f1)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/double.html'


    "sinad [signal]":
        prefix: "sinad"
        body: '''[${5:r}, ${6:totdistpow}] = sinad(${1:sxx}, ${2:f}, ${3:rbw}, ${4:'power'})'''
        description: '''[signal] Signal to noise and distortion ratio
        [r, totdistpow] = sinad(sxx, f, rbw, 'power')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sinad.html'


    "tf2zpk [signal]":
        prefix: "tf2zpk"
        body: '''[${3:z}, ${4:p}, ${5:k}] = tf2zpk(${1:b}, ${2:a})'''
        description: '''[signal] Convert transfer function filter parameters to zero-pole-gain form
        [z, p, k] = tf2zpk(b, a)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/tf2zpk.html'


    "fircls [signal]":
        prefix: "fircls"
        body: '''${7:b} = fircls(${1:n}, ${2:f}, ${3:amp}, ${4:up}, ${5:lo}, ${6:optional_'design_flag'})'''
        description: '''[signal] FIR Constrained Least Squares filter
        b = fircls(n, f, amp, up, lo, optional_'design_flag')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/fircls.html'


    "goertzel [signal]":
        prefix: "goertzel"
        body: '''${4:dft_data} = goertzel(${1:data}, ${2:freq_indices}, ${3:optional_dim})'''
        description: '''[signal] Discrete Fourier transform with second-order Goertzel
algorithm
        dft_data = goertzel(data, freq_indices, optional_dim)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/goertzel.html'


    "seqperiod [signal]":
        prefix: "seqperiod"
        body: '''[${2:p}, ${3:num}] = seqperiod(${1:x})'''
        description: '''[signal] Compute period of sequence
        [p, num] = seqperiod(x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/seqperiod.html'


    "czt [signal]":
        prefix: "czt"
        body: '''${5:y} = czt(${1:x}, ${2:m}, ${3:w}, ${4:a})'''
        description: '''[signal] Chirp Z-transform
        y = czt(x, m, w, a)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/czt.html'


    "cconv [signal]":
        prefix: "cconv"
        body: '''${4:c} = cconv(${1:gpuArrayA}, ${2:gpuArrayB}, ${3:n})'''
        description: '''[signal] Modulo-n circular convolution
        c = cconv(gpuArrayA, gpuArrayB, n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cconv.html'


    "info [signal]":
        prefix: "info"
        body: '''${2:s} = info(${1:d})'''
        description: '''[signal] Characteristic information about carrier synchronizer
        s = info(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/comm.carriersynchronizer.info.html'


    "iscola [signal]":
        prefix: "iscola"
        body: '''[${4:tf}, ${5:m}, ${6:maxDeviation}] = iscola(${1:window}, ${2:noverlap}, ${3:optional_method})'''
        description: '''[signal] Determine whether window-overlap combination is COLA compliant
        [tf, m, maxDeviation] = iscola(window, noverlap, optional_method)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/iscola.html'


    "blackman [signal]":
        prefix: "blackman"
        body: '''${3:w} = blackman(${1:N}, ${2:optional_SFLAG})'''
        description: '''[signal] Blackman window
        w = blackman(N, optional_SFLAG)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/blackman.html'


    "uencode [signal]":
        prefix: "uencode"
        body: '''${5:y} = uencode(${1:u}, ${2:n}, ${3:v}, ${4:optional_'SignFlag'})'''
        description: '''[signal] Quantize and encode floating-point inputs to integer outputs
        y = uencode(u, n, v, optional_'SignFlag')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/uencode.html'


    "firtype [signal]":
        prefix: "firtype"
        body: '''${2:t} = firtype(${1:d})'''
        description: '''[signal] Type of linear phase FIR filter
        t = firtype(d)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/firtype.html'


    "stmcb [signal]":
        prefix: "stmcb"
        body: '''[${7:b}, ${8:a}] = stmcb(${1:y}, ${2:x}, ${3:nb}, ${4:na}, ${5:niter}, ${6:optional_ai})'''
        description: '''[signal] Compute linear model using Steiglitz-McBride iteration
        [b, a] = stmcb(y, x, nb, na, niter, optional_ai)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/stmcb.html'


    "cheb1ord [signal]":
        prefix: "cheb1ord"
        body: '''[${6:n}, ${7:Wp}] = cheb1ord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[signal] Chebyshev Type I filter order
        [n, Wp] = cheb1ord(Wp, Ws, Rp, Rs, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheb1ord.html'


    "dpssload [signal]":
        prefix: "dpssload"
        body: '''[${3:e}, ${4:v}] = dpssload(${1:n}, ${2:nw})'''
        description: '''[signal] Load discrete prolate spheroidal sequences from database
        [e, v] = dpssload(n, nw)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dpssload.html'


    "cheby1 [signal]":
        prefix: "cheby1"
        body: '''[${6:A}, ${7:B}, ${8:C}, ${9:D}] = cheby1(${1:n}, ${2:Rp}, ${3:Wp}, ${4:ftype}, ${5:optional_'s'})'''
        description: '''[signal] Chebyshev Type I filter using specification object
        [A, B, C, D] = cheby1(n, Rp, Wp, ftype, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/cheby1.html'


    "istft [signal]":
        prefix: "istft"
        body: '''[${10:X}, ${11:T}] = istft(${1:S}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Method', ${6:value}, 'ConjugateSymmetric', ${7:value}, 'Centered', ${8:value}, 'InputTimeDimension', ${9:value})'''
        description: '''[signal] Inverse short-time Fourier transform
        [X, T] = istft(S, optional_Ts, 'Window', value, 'OverlapLength', value, 'FFTLength', value, 'Method', value, 'ConjugateSymmetric', value, 'Centered', value, 'InputTimeDimension', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/istft.html'


    "firls [signal]":
        prefix: "firls"
        body: '''${5:b} = firls(${1:n}, ${2:f}, ${3:a}, ${4:optional_'ftype'})'''
        description: '''[signal] Least-square linear-phase FIR filter design
        b = firls(n, f, a, optional_'ftype')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/firls.html'


    "poly2ac [signal]":
        prefix: "poly2ac"
        body: '''${3:r} = poly2ac(${1:a}, ${2:efinal})'''
        description: '''[signal] Convert prediction filter polynomial to autocorrelation sequence
        r = poly2ac(a, efinal)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/poly2ac.html'


    "corrmtx [signal]":
        prefix: "corrmtx"
        body: '''[${4:X}, ${5:R}] = corrmtx(${1:x}, ${2:m}, ${3:optional_method})'''
        description: '''[signal] Data matrix for autocorrelation matrix estimation
        [X, R] = corrmtx(x, m, optional_method)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/corrmtx.html'


    "periodogram [signal]":
        prefix: "periodogram"
        body: '''[${8:rpxx}, ${9:f}, ${10:pxx}, ${11:fc}] = periodogram(${1:x}, ${2:window}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:optional_spectrumtype}, ${7:optional_'reassigned'})'''
        description: '''[signal] Periodogram power spectral density estimate
        [rpxx, f, pxx, fc] = periodogram(x, window, f, fs, optional_freqrange, optional_spectrumtype, optional_'reassigned')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/periodogram.html'


    "kaiserord [signal]":
        prefix: "kaiserord"
        body: '''${6:c} = kaiserord(${1:f}, ${2:a}, ${3:dev}, ${4:fs}, ${5:'cell'})'''
        description: '''[signal] Kaiser window FIR filter design estimation parameters
        c = kaiserord(f, a, dev, fs, 'cell')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/kaiserord.html'


    "buttord [signal]":
        prefix: "buttord"
        body: '''[${6:n}, ${7:Wn}] = buttord(${1:Wp}, ${2:Ws}, ${3:Rp}, ${4:Rs}, ${5:optional_'s'})'''
        description: '''[signal] Butterworth filter order and cutoff frequency
        [n, Wn] = buttord(Wp, Ws, Rp, Rs, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/buttord.html'


    "dftmtx [signal]":
        prefix: "dftmtx"
        body: '''${2:A} = dftmtx(${1:n})'''
        description: '''[signal] Discrete Fourier transform matrix in Galois
            field
        A = dftmtx(n)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dftmtx.html'


    "lp2bs [signal]":
        prefix: "lp2bs"
        body: '''[${7:At}, ${8:Bt}, ${9:Ct}, ${10:Dt}] = lp2bs(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo}, ${6:Bw})'''
        description: '''[signal] Transform lowpass analog filters to bandstop
        [At, Bt, Ct, Dt] = lp2bs(A, B, C, D, Wo, Bw)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lp2bs.html'


    "envspectrum [signal]":
        prefix: "envspectrum"
        body: '''[${5:es}, ${6:f}, ${7:env}, ${8:t}] = envspectrum(${1:xt}, 'Method', ${2:value}, 'Band', ${3:value}, 'FilterOrder', ${4:value})'''
        description: '''[signal] Envelope spectrum for machinery diagnosis
        [es, f, env, t] = envspectrum(xt, 'Method', value, 'Band', value, 'FilterOrder', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/envspectrum.html'


    "modalsd [signal]":
        prefix: "modalsd"
        body: '''${8:fn} = modalsd(${1:frf}, ${2:f}, ${3:fs}, 'FitMethod', ${4:value}, 'FreqRange', ${5:value}, 'MaxModes', ${6:value}, 'SCriteria', ${7:value})'''
        description: '''[signal] Generate stabilization diagram for modal analysis
        fn = modalsd(frf, f, fs, 'FitMethod', value, 'FreqRange', value, 'MaxModes', value, 'SCriteria', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/modalsd.html'


    "stft [signal]":
        prefix: "stft"
        body: '''[${8:S}, ${9:F}, ${10:T}] = stft(${1:X}, ${2:optional_Ts}, 'Window', ${3:value}, 'OverlapLength', ${4:value}, 'FFTLength', ${5:value}, 'Centered', ${6:value}, 'OutputTimeDimension', ${7:value})'''
        description: '''[signal] Short-time Fourier transform
        [S, F, T] = stft(X, optional_Ts, 'Window', value, 'OverlapLength', value, 'FFTLength', value, 'Centered', value, 'OutputTimeDimension', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/stft.html'


    "filtic [signal]":
        prefix: "filtic"
        body: '''${5:z} = filtic(${1:b}, ${2:a}, ${3:y}, ${4:optional_x})'''
        description: '''[signal] Initial conditions for transposed direct-form II filter
implementation
        z = filtic(b, a, y, optional_x)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/filtic.html'


    "sos2tf [signal]":
        prefix: "sos2tf"
        body: '''[${3:b}, ${4:a}] = sos2tf(${1:sos}, ${2:optional_g})'''
        description: '''[signal] Convert digital filter second-order section data to transfer
function form
        [b, a] = sos2tf(sos, optional_g)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sos2tf.html'


    "demod [signal]":
        prefix: "demod"
        body: '''${6:x} = demod(${1:y}, ${2:fc}, ${3:fs}, ${4:'pwm'}, ${5:'centered'})'''
        description: '''[signal] Demodulation for communications simulation
        x = demod(y, fc, fs, 'pwm', 'centered')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/demod.html'


    "rlevinson [signal]":
        prefix: "rlevinson"
        body: '''[${3:r}, ${4:u}, ${5:k}, ${6:e}] = rlevinson(${1:a}, ${2:efinal})'''
        description: '''[signal] Reverse Levinson-Durbin recursion
        [r, u, k, e] = rlevinson(a, efinal)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/rlevinson.html'


    "xcov [signal]":
        prefix: "xcov"
        body: '''[${5:c}, ${6:lags}] = xcov(${1:x}, ${2:optional_y}, ${3:optional_maxlag}, ${4:optional_scaleopt})'''
        description: '''[signal] Cross-covariance
        [c, lags] = xcov(x, optional_y, optional_maxlag, optional_scaleopt)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/xcov.html'


    "undershoot [signal]":
        prefix: "undershoot"
        body: '''[${8:OS}, ${9:OSLEV}, ${10:OSINST}] = undershoot(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'Region', ${4:value}, 'SeekFactor', ${5:value}, 'StateLevels', ${6:value}, 'Tolerance', ${7:value})'''
        description: '''[signal]  Undershoot metrics of bilevel waveform transitions
        [OS, OSLEV, OSINST] = undershoot(X, optional_T, 'PercentReferenceLevels', value, 'Region', value, 'SeekFactor', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/undershoot.html'


    "sos2cell [signal]":
        prefix: "sos2cell"
        body: '''${3:c} = sos2cell(${1:m}, ${2:optional_g})'''
        description: '''[signal] Convert second-order sections matrix to cell array
        c = sos2cell(m, optional_g)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sos2cell.html'


    "maxflat [signal]":
        prefix: "maxflat"
        body: '''${5:b} = maxflat(${1:n}, ${2:'sym'}, ${3:Wn}, ${4:optional_'design_flag'})'''
        description: '''[signal] Maxflat FIR filter
        b = maxflat(n, 'sym', Wn, optional_'design_flag')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/maxflat.html'


    "digitrevorder [signal]":
        prefix: "digitrevorder"
        body: '''[${3:y}, ${4:i}] = digitrevorder(${1:x}, ${2:r})'''
        description: '''[signal] Permute input into digit-reversed order
        [y, i] = digitrevorder(x, r)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/digitrevorder.html'


    "polyscale [signal]":
        prefix: "polyscale"
        body: '''${3:b} = polyscale(${1:a}, ${2:alpha})'''
        description: '''[signal] Scale roots of polynomial
        b = polyscale(a, alpha)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/polyscale.html'


    "finddelay [signal]":
        prefix: "finddelay"
        body: '''${4:D} = finddelay(${1:X}, ${2:Y}, ${3:optional_maxlag})'''
        description: '''[signal] Estimate delay(s) between signals
        D = finddelay(X, Y, optional_maxlag)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/../signal/ref/finddelay.html'


    "dpssclear [signal]":
        prefix: "dpssclear"
        body: '''dpssclear(${1:n}, ${2:nw})'''
        description: '''[signal] Remove discrete prolate spheroidal sequences from database
        dpssclear(n, nw)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dpssclear.html'


    "impinvar [signal]":
        prefix: "impinvar"
        body: '''[${5:bz}, ${6:az}] = impinvar(${1:b}, ${2:a}, ${3:fs}, ${4:optional_tol})'''
        description: '''[signal] Impulse invariance method for analog-to-digital filter
conversion
        [bz, az] = impinvar(b, a, fs, optional_tol)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/impinvar.html'


    "pulstran [signal]":
        prefix: "pulstran"
        body: '''${5:y} = pulstran(${1:t}, ${2:d}, ${3:p}, ${4:optional_fs})'''
        description: '''[signal] Pulse train
        y = pulstran(t, d, p, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pulstran.html'


    "ifwht [signal]":
        prefix: "ifwht"
        body: '''${4:y} = ifwht(${1:x}, ${2:n}, ${3:optional_ordering})'''
        description: '''[signal] Inverse Fast Walsh-Hadamard transform
        y = ifwht(x, n, optional_ordering)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ifwht.html'


    "is2rc [signal]":
        prefix: "is2rc"
        body: '''${2:k} = is2rc(${1:isin})'''
        description: '''[signal] Convert inverse sine parameters to reflection coefficients
        k = is2rc(isin)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/is2rc.html'


    "slewrate [signal]":
        prefix: "slewrate"
        body: '''[${6:S}, ${7:LT}, ${8:UT}, ${9:LL}, ${10:UL}] = slewrate(${1:X}, ${2:optional_T}, 'PercentReferenceLevels', ${3:value}, 'StateLevels', ${4:value}, 'Tolerance', ${5:value})'''
        description: '''[signal] Slew rate of bilevel waveform
        [S, LT, UT, LL, UL] = slewrate(X, optional_T, 'PercentReferenceLevels', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/slewrate.html'


    "pentropy [signal]":
        prefix: "pentropy"
        body: '''[${8:se}, ${9:t}] = pentropy(${1:p}, ${2:fp}, ${3:tp}, 'Instantaneous', ${4:value}, 'Scaled', ${5:value}, 'FrequencyLimits', ${6:value}, 'TimeLimits', ${7:value})'''
        description: '''[signal] Spectral entropy of signal
        [se, t] = pentropy(p, fp, tp, 'Instantaneous', value, 'Scaled', value, 'FrequencyLimits', value, 'TimeLimits', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pentropy.html'


    "sfdr [signal]":
        prefix: "sfdr"
        body: '''[${5:r}, ${6:spurpow}, ${7:spurfreq}] = sfdr(${1:sxx}, ${2:f}, ${3:optional_msd}, ${4:'power'})'''
        description: '''[signal] Spurious free dynamic range
        [r, spurpow, spurfreq] = sfdr(sxx, f, optional_msd, 'power')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/sfdr.html'


    "plomb [signal]":
        prefix: "plomb"
        body: '''[${5:pxx}, ${6:fvec}] = plomb(${1:x}, ${2:fs}, ${3:fvec}, ${4:optional_spectrumtype})'''
        description: '''[signal] Lomb-Scargle periodogram
        [pxx, fvec] = plomb(x, fs, fvec, optional_spectrumtype)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/plomb.html'


    "findpeaks [signal]":
        prefix: "findpeaks"
        body: '''[${13:pks}, ${14:locs}, ${15:w}, ${16:p}] = findpeaks(${1:data}, ${2:Fs}, 'NPeaks', ${3:value}, 'SortStr', ${4:value}, 'MinPeakHeight', ${5:value}, 'MinPeakProminence', ${6:value}, 'Threshold', ${7:value}, 'MinPeakDistance', ${8:value}, 'WidthReference', ${9:value}, 'MinPeakWidth', ${10:value}, 'MaxPeakWidth', ${11:value}, 'Annotate', ${12:value})'''
        description: '''[signal] Find local maxima
        [pks, locs, w, p] = findpeaks(data, Fs, 'NPeaks', value, 'SortStr', value, 'MinPeakHeight', value, 'MinPeakProminence', value, 'Threshold', value, 'MinPeakDistance', value, 'WidthReference', value, 'MinPeakWidth', value, 'MaxPeakWidth', value, 'Annotate', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/findpeaks.html'


    "medfilt1 [signal]":
        prefix: "medfilt1"
        body: '''${5:y} = medfilt1(${1:x}, ${2:optional_n}, ${3:optional_nanflag}, ${4:optional_padding})'''
        description: '''[signal] 1-D median filtering
        y = medfilt1(x, optional_n, optional_nanflag, optional_padding)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/medfilt1.html'


    "ellip [signal]":
        prefix: "ellip"
        body: '''[${7:A}, ${8:B}, ${9:C}, ${10:D}] = ellip(${1:n}, ${2:Rp}, ${3:Rs}, ${4:Wp}, ${5:ftype}, ${6:optional_'s'})'''
        description: '''[signal] Elliptic filter using specification object
        [A, B, C, D] = ellip(n, Rp, Rs, Wp, ftype, optional_'s')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/ellip.html'


    "lp2hp [signal]":
        prefix: "lp2hp"
        body: '''[${6:At}, ${7:Bt}, ${8:Ct}, ${9:Dt}] = lp2hp(${1:A}, ${2:B}, ${3:C}, ${4:D}, ${5:Wo})'''
        description: '''[signal] Transform lowpass analog filters to highpass
        [At, Bt, Ct, Dt] = lp2hp(A, B, C, D, Wo)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/lp2hp.html'


    "pulsewidth [signal]":
        prefix: "pulsewidth"
        body: '''[${7:W}, ${8:INITCROSS}, ${9:FINALCROSS}, ${10:MIDLEV}] = pulsewidth(${1:X}, ${2:optional_T}, 'MidPercentReferenceLevel', ${3:value}, 'Polarity', ${4:value}, 'StateLevels', ${5:value}, 'Tolerance', ${6:value})'''
        description: '''[signal] Bilevel waveform pulse width
        [W, INITCROSS, FINALCROSS, MIDLEV] = pulsewidth(X, optional_T, 'MidPercentReferenceLevel', value, 'Polarity', value, 'StateLevels', value, 'Tolerance', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pulsewidth.html'


    "peig [signal]":
        prefix: "peig"
        body: '''[${9:S}, ${10:f}, ${11:v}, ${12:e}] = peig(${1:x}, ${2:p}, ${3:nfft}, ${4:fs}, ${5:nwin}, ${6:noverlap}, ${7:optional_'corr'}, ${8:optional_freqrange})'''
        description: '''[signal] Pseudospectrum using eigenvector method
        [S, f, v, e] = peig(x, p, nfft, fs, nwin, noverlap, optional_'corr', optional_freqrange)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/peig.html'


    "grpdelay [signal]":
        prefix: "grpdelay"
        body: '''${4:gd} = grpdelay(${1:d}, ${2:f}, ${3:optional_fs})'''
        description: '''[signal] Group delay response of discrete-time filter System
        object
        gd = grpdelay(d, f, optional_fs)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/dsp.allpassfilter.grpdelay.html'


    "pmcov [signal]":
        prefix: "pmcov"
        body: '''[${8:pxx}, ${9:f}, ${10:pxxc}] = pmcov(${1:x}, ${2:order}, ${3:f}, ${4:fs}, ${5:optional_freqrange}, ${6:'ConfidenceLevel'}, ${7:optional_probability})'''
        description: '''[signal] Autoregressive power spectral density estimate —
modified covariance method
        [pxx, f, pxxc] = pmcov(x, order, f, fs, optional_freqrange, 'ConfidenceLevel', optional_probability)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/pmcov.html'


    "spectrogram [signal]":
        prefix: "spectrogram"
        body: '''[${13:s}, ${14:f}, ${15:t}, ${16:ps}, ${17:fc}, ${18:tc}] = spectrogram(${1:x}, ${2:window}, ${3:noverlap}, ${4:f}, ${5:fs}, ${6:'reassigned'}, ${7:optional_freqrange}, ${8:optional_spectrumtype}, ${9:'MinThreshold'}, ${10:thresh}, ${11:optional_freqloc}, 'OutputTimeDimension', ${12:value})'''
        description: '''[signal] Spectrogram using short-time Fourier transform
        [s, f, t, ps, fc, tc] = spectrogram(x, window, noverlap, f, fs, 'reassigned', optional_freqrange, optional_spectrumtype, 'MinThreshold', thresh, optional_freqloc, 'OutputTimeDimension', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/spectrogram.html'


    "xcorr2 [signal]":
        prefix: "xcorr2"
        body: '''${3:c} = xcorr2(${1:a}, ${2:optional_b})'''
        description: '''[signal] 2-D cross-correlation
        c = xcorr2(a, optional_b)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/xcorr2.html'


    "arburg [signal]":
        prefix: "arburg"
        body: '''[${3:a}, ${4:e}, ${5:rc}] = arburg(${1:x}, ${2:p})'''
        description: '''[signal] Autoregressive all-pole model parameters — Burg’s
method
        [a, e, rc] = arburg(x, p)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/arburg.html'


    "intfilt [signal]":
        prefix: "intfilt"
        body: '''${4:b} = intfilt(${1:l}, ${2:n}, ${3:'Lagrange'})'''
        description: '''[signal] Interpolation FIR filter design
        b = intfilt(l, n, 'Lagrange')
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/signal/ref/intfilt.html'

