# MATLAB snippets generated using https://github.com/aminya/Matlab-Snippets
'.source.matlab, source.m':

    "dicomCollection [images]":
        prefix: "dicomCollection"
        body: '''${3:collection} = dicomCollection(${1:source}, 'IncludeSubfolders', ${2:value})'''
        description: '''[images] Gather details about related series of DICOM files
        collection = dicomCollection(source, 'IncludeSubfolders', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/dicomcollection.html'


    "camresponse [images]":
        prefix: "camresponse"
        body: '''${3:crf} = camresponse(${1:filenames}, 'ExposureTimes', ${2:value})'''
        description: '''[images] Estimate camera response function 
        crf = camresponse(filenames, 'ExposureTimes', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/camresponse.html'


    "tonemap [images]":
        prefix: "tonemap"
        body: '''${5:RGB} = tonemap(${1:HDR}, 'AdjustLightness', ${2:value}, 'AdjustSaturation', ${3:value}, 'NumberOfTiles', ${4:value})'''
        description: '''[images] Render high dynamic range image for viewing
        RGB = tonemap(HDR, 'AdjustLightness', value, 'AdjustSaturation', value, 'NumberOfTiles', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/tonemap.html'


    "makehdr [images]":
        prefix: "makehdr"
        body: '''${5:HDR} = makehdr(${1:files}, 'BaseFile', ${2:value}, 'MinimumLimit', ${3:value}, 'MaximumLimit', ${4:value})'''
        description: '''[images] Create high dynamic range image
        HDR = makehdr(files, 'BaseFile', value, 'MinimumLimit', value, 'MaximumLimit', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/makehdr.html'


    "images.internal.dicom.DICOMFile [images]":
        prefix: "images.internal.dicom.DICOMFile"
        body: '''${2:obj} = images.internal.dicom.DICOMFile(${1:filename})'''
        description: '''[images] 
        obj = images.internal.dicom.DICOMFile(filename)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/images.internal.dicom.DICOMFile.html'


    "dicomreadVolume [images]":
        prefix: "dicomreadVolume"
        body: '''[${4:V}, ${5:spatial}, ${6:dim}] = dicomreadVolume(${1:source}, ${2:RowName}, 'MakeIsotropic', ${3:value})'''
        description: '''[images] Construct 4-D volume from set of DICOM images
        [V, spatial, dim] = dicomreadVolume(source, RowName, 'MakeIsotropic', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/dicomreadvolume.html'


    "bigimage [images]":
        prefix: "bigimage"
        body: '''${7:obj} = bigimage(${1:source}, 'ClassNames', ${2:value}, 'PixelLabelIDs', ${3:value}, 'BlockSize', ${4:value}, 'SpatialReferencing', ${5:value}, 'UnloadedValue', ${6:value})'''
        description: '''[images] Out-of-core processing of very large images
        obj = bigimage(source, 'ClassNames', value, 'PixelLabelIDs', value, 'BlockSize', value, 'SpatialReferencing', value, 'UnloadedValue', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/bigimage.html'


    "nitfread [images]":
        prefix: "nitfread"
        body: '''${4:x} = nitfread(${1:filename}, ${2:optional_idx}, 'PixelRegion', ${3:value})'''
        description: '''[images] Read image from NITF file
        x = nitfread(filename, optional_idx, 'PixelRegion', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/nitfread.html'


    "images.dicom.parseDICOMDIR [images]":
        prefix: "images.dicom.parseDICOMDIR"
        body: '''${2:details} = images.dicom.parseDICOMDIR(${1:filename})'''
        description: '''[images] Extract metadata from DICOMDIR file
        details = images.dicom.parseDICOMDIR(filename)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/images.dicom.parsedicomdir.html'


    "bigimageDatastore [images]":
        prefix: "bigimageDatastore"
        body: '''${9:obj} = bigimageDatastore(${1:BIGIMAGES}, ${2:LEVELS}, 'ReadSize', ${3:value}, 'BlockSize', ${4:value}, 'BlockOffsets', ${5:value}, 'Masks', ${6:value}, 'InclusionThreshold', ${7:value}, 'IncompleteBlocks', ${8:value})'''
        description: '''[images] Datastore to manage blocks of big image data
        obj = bigimageDatastore(BIGIMAGES, LEVELS, 'ReadSize', value, 'BlockSize', value, 'BlockOffsets', value, 'Masks', value, 'InclusionThreshold', value, 'IncompleteBlocks', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/../images/ref/bigimagedatastore.html'


    "niftiwrite [images]":
        prefix: "niftiwrite"
        body: '''${8:status} = niftiwrite(${1:V}, ${2:filename}, ${3:optional_info}, 'Combined', ${4:value}, 'Compressed', ${5:value}, 'Endian', ${6:value}, 'Version', ${7:value})'''
        description: '''[images] Write volume to file using NIfTI format
        status = niftiwrite(V, filename, optional_info, 'Combined', value, 'Compressed', value, 'Endian', value, 'Version', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/niftiwrite.html'


    "niftiread [images]":
        prefix: "niftiread"
        body: '''${3:V} = niftiread(${1:hdrfilename}, ${2:imgfilename})'''
        description: '''[images] Read NIfTI image
        V = niftiread(hdrfilename, imgfilename)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/niftiread.html'


    "nitfinfo [images]":
        prefix: "nitfinfo"
        body: '''${2:metadata} = nitfinfo(${1:filename})'''
        description: '''[images] Read metadata from National Imagery Transmission Format (NITF) file
        metadata = nitfinfo(filename)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/nitfinfo.html'


    "niftiinfo [images]":
        prefix: "niftiinfo"
        body: '''${2:info} = niftiinfo(${1:filename})'''
        description: '''[images] Read metadata from NIfTI file
        info = niftiinfo(filename)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/niftiinfo.html'


    "images.dicom.decodeUID [images]":
        prefix: "images.dicom.decodeUID"
        body: '''${2:details} = images.dicom.decodeUID(${1:UID})'''
        description: '''[images] Get information about DICOM unique identifier
        details = images.dicom.decodeUID(UID)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/ref/images.dicom.decodeuid.html'


    "bigimage.write [images]":
        prefix: "bigimage.write"
        body: '''bigimage.write(${1:IMG}, ${2:OUT})'''
        description: '''[images] 
        bigimage.write(IMG, OUT)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/bigimage.write.html'


    "bigimage.apply [images]":
        prefix: "bigimage.apply"
        body: '''bigimage.apply(${1:IMG}, ${2:LEVEL}, ${3:FCN}, ${4:optional_EXTRAIMAGES}, 'BlockSize', ${5:value}, 'UseParallel', ${6:value}, 'BorderSize', ${7:value}, 'DisplayWaitbar', ${8:value}, 'OutputFolder', ${9:value}, 'PadMethod', ${10:value}, 'Mask', ${11:value}, 'InclusionThreshold', ${12:value}, 'ExtraImageLevels', ${13:value})'''
        description: '''[images] 
        bigimage.apply(IMG, LEVEL, FCN, optional_EXTRAIMAGES, 'BlockSize', value, 'UseParallel', value, 'BorderSize', value, 'DisplayWaitbar', value, 'OutputFolder', value, 'PadMethod', value, 'Mask', value, 'InclusionThreshold', value, 'ExtraImageLevels', value)
        '''
        descriptionMoreURL: 'https://www.mathworks.com/help/images/bigimage.apply.html'

